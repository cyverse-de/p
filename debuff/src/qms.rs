// @generated
/// *
/// Representation of a resource type.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceType {
    /// The unique identifier.
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// The name of the resource. Will usually be "data.size" and "cpu.hours".
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    /// The units used for the resource. Usually "bytes" or "cpu hours".
    #[prost(string, tag="3")]
    pub unit: ::prost::alloc::string::String,
}
/// *
/// A response type for resource type requests.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceTypeResponse {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information returned by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The resource type returned by the request handler.
    #[prost(message, optional, tag="3")]
    pub resource_type: ::core::option::Option<ResourceType>,
}
/// *
/// A response type for the resource type requests that contains a list of 
/// resource type definitions.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceTypeList {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information returned by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// A list of resource types returned by the request handler.
    #[prost(message, repeated, tag="3")]
    pub resource_types: ::prost::alloc::vec::Vec<ResourceType>,
}
/// *
/// A representation of a user in the QMS system.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QmsUser {
    /// A user's unique identifier in QMS.
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// A user's username in QMS.
    #[prost(string, tag="2")]
    pub username: ::prost::alloc::string::String,
}
/// *
/// A response to a request for info about a QMS user.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QmsUserResponse {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information generated by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The user returned by the request handler.
    #[prost(message, optional, tag="3")]
    pub user: ::core::option::Option<QmsUser>,
}
/// *
///   A response to a request for info about a list of users.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QmsUserList {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information generated by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The user list returned by the request handler.
    #[prost(message, repeated, tag="3")]
    pub users: ::prost::alloc::vec::Vec<QmsUser>,
}
/// *
/// A request to add a user to the QMS system.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddUserRequest {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The username for the user being added to the system.
    #[prost(string, tag="3")]
    pub username: ::prost::alloc::string::String,
    /// The name of the plan the user should be subscribed to.
    #[prost(string, tag="4")]
    pub plan_name: ::prost::alloc::string::String,
    /// True if the user paid for the subscription.
    #[prost(bool, tag="5")]
    pub paid: bool,
}
/// *
/// A response to a request to add a user to the QMS system.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddUserResponse {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information generated by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The unique identfier of the newly added user.
    #[prost(string, tag="3")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// The username of the newly added user.
    #[prost(string, tag="4")]
    pub username: ::prost::alloc::string::String,
    /// The name of the plan the newly added user is subscribed to.
    #[prost(string, tag="5")]
    pub plan_name: ::prost::alloc::string::String,
    /// The unique identifier for the plan the newly added user is subscribed to.
    #[prost(string, tag="6")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub plan_uuid: ::prost::alloc::string::String,
}
/// *
/// Represents a default quota value used in plans. Can be overridden on a
/// per-user basis for a subscription to provide customized quotas. Also referred to
/// as plan quota defaults.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaDefault {
    /// The unique identifier/primary key for the quota default.
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// The value of the quota default.
    #[prost(double, tag="2")]
    pub quota_value: f64,
    /// The resource type the quota applies to.
    #[prost(message, optional, tag="3")]
    pub resource_type: ::core::option::Option<ResourceType>,
}
/// *
/// A response type for quota default requests.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaDefaultResponse {
    /// Can container telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Contains error info from the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The quota default object returned by the request handler.
    #[prost(message, optional, tag="3")]
    pub quota_default: ::core::option::Option<QuotaDefault>,
}
/// *
/// A response type for quota default requests that contains a list of quota
/// defaults.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaDefaultList {
    /// Can contain telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Contains error info from the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The list of quota default objkects returned by the request handler.
    #[prost(message, repeated, tag="3")]
    pub quota_defaults: ::prost::alloc::vec::Vec<QuotaDefault>,
}
/// *
/// Represents a subscription plan available to users.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plan {
    /// Unique identifier for the plan.
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// The name of the plan.
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    /// A description of the plan.
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
    /// A list of quota defaults associated with the plan.
    #[prost(message, repeated, tag="4")]
    pub plan_quota_defaults: ::prost::alloc::vec::Vec<QuotaDefault>,
}
/// *
/// A response to a plan request. Contains a single plan.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlanResponse {
    /// Contains telemtry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Contains error data returned by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The plan returned by the request handler.
    #[prost(message, optional, tag="3")]
    pub plan: ::core::option::Option<Plan>,
}
/// *
/// A response to a plan request. Contains a list of plans.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlanList {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Contains error data returned by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// A list of plans returned by the request handler.
    #[prost(message, repeated, tag="3")]
    pub plans: ::prost::alloc::vec::Vec<Plan>,
}
/// *
/// A request for plan information specified by the plan's unique identifier.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlanRequest {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The unique identifier of the plan being requested.
    #[prost(string, tag="2")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub plan_id: ::prost::alloc::string::String,
}
/// *
/// A request to add a new plan to the system.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddPlanRequest {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The plan to add to the system.
    #[prost(message, optional, tag="2")]
    pub plan: ::core::option::Option<Plan>,
}
/// *
/// A request to add a quota default to an existing plan.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddPlanQuotaDefaultRequest {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The name of the plan to add the quota default to.
    #[prost(string, tag="2")]
    pub plan_name: ::prost::alloc::string::String,
    /// The quota default to add to the plan specified by the plan_name field.
    #[prost(message, optional, tag="3")]
    pub quota_default: ::core::option::Option<QuotaDefault>,
}
/// *
/// Represents a quota in the system, which is the currently configured limit on
/// a resource type a user has associated with their plan. Overrides the quota
/// default associated with the plan the user has.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Quota {
    /// The unique identifier.
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// The quota value (aka limit).
    #[prost(double, tag="2")]
    pub quota: f64,
    /// The resource type the quota value applies to.
    #[prost(message, optional, tag="3")]
    pub resource_type: ::core::option::Option<ResourceType>,
    /// A freeform text field containing info about who created the quota.
    #[prost(string, tag="4")]
    pub created_by: ::prost::alloc::string::String,
    /// When the quota was created.
    #[prost(message, optional, tag="5")]
    pub created_at: ::core::option::Option<::pbjson_types::Timestamp>,
    /// A freeform text field containing info about who last modified the quota.
    #[prost(string, tag="6")]
    pub last_modified_by: ::prost::alloc::string::String,
    /// When the quota was last modified.
    #[prost(message, optional, tag="7")]
    pub last_modified_at: ::core::option::Option<::pbjson_types::Timestamp>,
    /// The unique identifier of the subscription that the quota is associated with.
    #[prost(string, tag="8")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub subscription_id: ::prost::alloc::string::String,
}
/// *
/// A response to a quota request. Contains a single quota object.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaResponse {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information generated by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The quota returned by the request handler.
    #[prost(message, optional, tag="3")]
    pub quota: ::core::option::Option<Quota>,
}
/// *
/// A response to a quota request containing a list of quotas.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuotaList {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information generated by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// A list of quotas returned by the request handler.
    #[prost(message, repeated, tag="3")]
    pub quotas: ::prost::alloc::vec::Vec<Quota>,
}
/// *
/// A request to add a quota to a subscription.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddQuotaRequest {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The quota to be added to the system.
    #[prost(message, optional, tag="2")]
    pub quota: ::core::option::Option<Quota>,
}
/// *
/// A representation of how much a user has used a resource type.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Usage {
    /// The unique identifier
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// How much the resource has been used.
    #[prost(double, tag="2")]
    pub usage: f64,
    /// The unique identifier for the subscription the usage is associated with.
    #[prost(string, tag="3")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub subscription_id: ::prost::alloc::string::String,
    /// The resource type the usage applies to.
    #[prost(message, optional, tag="4")]
    pub resource_type: ::core::option::Option<ResourceType>,
    /// Who created the usage record. Probably not the name of a user.
    #[prost(string, tag="5")]
    pub created_by: ::prost::alloc::string::String,
    /// When the usage record was created.
    #[prost(message, optional, tag="6")]
    pub created_at: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Who last modified the usage record. Probably not the name of a user.
    #[prost(string, tag="7")]
    pub last_modified_by: ::prost::alloc::string::String,
    /// When the usage record was last modified.
    #[prost(message, optional, tag="8")]
    pub last_modified_at: ::core::option::Option<::pbjson_types::Timestamp>,
}
/// *
/// A response to a request for a usage record.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsageResponse {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information returned by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// Contains the usage info returned by the request handler.
    #[prost(message, optional, tag="3")]
    pub usage: ::core::option::Option<Usage>,
}
/// *
/// A response to a request for usage info containing multiple usage records.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsageList {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information returned by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// A list of usages returned by the request handler.
    #[prost(message, repeated, tag="3")]
    pub usages: ::prost::alloc::vec::Vec<Usage>,
}
/// *
/// Representation of a subscription.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Subscription {
    /// The unique identifier 
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// The date the subscription activates.
    #[prost(message, optional, tag="2")]
    pub effective_start_date: ::core::option::Option<::pbjson_types::Timestamp>,
    /// The date the subscription deactivates/expires.
    #[prost(message, optional, tag="3")]
    pub effective_end_date: ::core::option::Option<::pbjson_types::Timestamp>,
    /// The user in the QMS system that the subscription is for.
    #[prost(message, optional, tag="4")]
    pub user: ::core::option::Option<QmsUser>,
    /// The plan the user is subscribed to.
    #[prost(message, optional, tag="5")]
    pub plan: ::core::option::Option<Plan>,
    /// The list of quotas applied to the subscription. Initially populated
    /// by quota defaults, but can be overridden.
    #[prost(message, repeated, tag="6")]
    pub quotas: ::prost::alloc::vec::Vec<Quota>,
    /// The list of resource usages that the user has generated while this plan was active.
    #[prost(message, repeated, tag="7")]
    pub usages: ::prost::alloc::vec::Vec<Usage>,
    /// A flag indicating whether or not the user paid for the subscription.
    #[prost(bool, tag="8")]
    pub paid: bool,
}
/// *
/// A response to a request for a subscription.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionResponse {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information returned by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The subscription returned by the request handler.
    #[prost(message, optional, tag="3")]
    pub subscription: ::core::option::Option<Subscription>,
}
/// *
/// A response to a request for a list of subscriptions.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionList {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information returned by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The subscription list returned by the request handler.
    #[prost(message, repeated, tag="3")]
    pub subscriptions: ::prost::alloc::vec::Vec<Subscription>,
}
/// *
/// A request to change a subscription.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeSubscriptionRequest {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// A username for the user whose subscription is being changed.
    #[prost(string, tag="2")]
    pub username: ::prost::alloc::string::String,
    /// Either a plan's unique identifier or name.
    #[prost(oneof="change_subscription_request::Plan", tags="3, 4")]
    pub plan: ::core::option::Option<change_subscription_request::Plan>,
}
/// Nested message and enum types in `ChangeSubscriptionRequest`.
pub mod change_subscription_request {
    /// Either a plan's unique identifier or name.
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Plan {
        #[prost(string, tag="3")]
        #[validate(custom = "crate::custom_validator::validate_uuid")]
        Uuid(::prost::alloc::string::String),
        #[prost(string, tag="4")]
        Name(::prost::alloc::string::String),
    }
}
/// *
/// Represents an add-on that can be applied to a subscription to provide a user
/// with a change in a resource quota.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Addon {
    /// The unique identifier.
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// The name of the add-on.
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    /// The description of the add-on.
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
    /// The resource type of the add-on.
    #[prost(message, optional, tag="4")]
    pub resource_type: ::core::option::Option<ResourceType>,
    /// How much of the resource type is added to the quota by the add-on.
    #[prost(double, tag="5")]
    pub default_amount: f64,
    /// Whether a user must pay for the add-on. Not whether the user has paid.
    #[prost(bool, tag="6")]
    pub default_paid: bool,
}
/// *
/// A response to an add-on request. Contains a single add-on.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddonResponse {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information generated by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The add-on returned by the request handler.
    #[prost(message, optional, tag="3")]
    pub addon: ::core::option::Option<Addon>,
}
/// *
/// A response to an add-on request that contains a list of add-ons.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddonListResponse {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information generated by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The list of add-ons returned by the request handler.
    #[prost(message, repeated, tag="3")]
    pub addons: ::prost::alloc::vec::Vec<Addon>,
}
/// *
/// A request to add an add-on to the system.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddAddonRequest {
    /// Contains telemetry information.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The add-on to be added.
    #[prost(message, optional, tag="2")]
    pub addon: ::core::option::Option<Addon>,
}
/// *
/// A request to get information about an add-on.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddonLookupRequest {
    /// Contains telemetry information.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Either the add-on's id or name.
    #[prost(oneof="addon_lookup_request::Addon", tags="2, 3")]
    pub addon: ::core::option::Option<addon_lookup_request::Addon>,
}
/// Nested message and enum types in `AddonLookupRequest`.
pub mod addon_lookup_request {
    /// Either the add-on's id or name.
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Addon {
        #[prost(string, tag="2")]
        #[validate(custom = "crate::custom_validator::validate_uuid")]
        Uuid(::prost::alloc::string::String),
        #[prost(string, tag="3")]
        Name(::prost::alloc::string::String),
    }
}
/// *
/// A request to update an add-on. The boolean fields are needed because Go (and
/// probably other languages) needs a way to tell when to set a field to an empty
/// string, since that's the zero value for a string.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateAddonRequest {
    /// Contains telemetry information.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The values to set in the update.
    #[prost(message, optional, tag="2")]
    pub addon: ::core::option::Option<Addon>,
    /// Whether to update the name of the addon.
    #[prost(bool, tag="3")]
    pub update_name: bool,
    /// Whether to update the description of the addon.
    #[prost(bool, tag="4")]
    pub update_description: bool,
    /// Whether to update the resource type of the addon.
    #[prost(bool, tag="5")]
    pub update_resource_type: bool,
    /// Whether to update the default amount of the addon.
    #[prost(bool, tag="6")]
    pub update_default_amount: bool,
    /// Whether to update the default paid field of the addon.
    #[prost(bool, tag="7")]
    pub update_default_paid: bool,
}
/// *
/// SubscriptionAddon is an add-on that has been applied to a subscription. It 
/// contains fields that can override the the default_amount and default_paid 
/// fields in the subscription.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionAddon {
    /// The unique identifier for the add-on
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// The add-on used with the subscription. May only contain the add-on's 
    /// UUID in some circumstances.
    #[prost(message, optional, tag="2")]
    pub addon: ::core::option::Option<Addon>,
    /// The subscription the add-on was applied to. May only contain the add-on's
    /// UUID in some circumstances.
    #[prost(message, optional, tag="3")]
    pub subscription: ::core::option::Option<Subscription>,
    /// The amount of the resource applied by the add-on. This should default to
    /// the amount contained in the add-on definition, but can be overridden, 
    /// which is why it's a separate field here.
    #[prost(double, tag="4")]
    pub amount: f64,
    /// Whether the subscription add-on costs money. This should default to the 
    /// same paid value contained in the add-on definition, but can be overridden,
    /// which is whay it's a separate field here.
    #[prost(bool, tag="5")]
    pub paid: bool,
}
/// *
/// Contains the information needed to update a subscription add-on.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateSubscriptionAddonRequest {
    /// Contains telemetry information.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The subscription add-on information being updated. Does not necessarily
    /// have all fields set and the UUID field should not be set.
    #[prost(message, optional, tag="2")]
    pub subscription_addon: ::core::option::Option<SubscriptionAddon>,
    /// Whether to update the addon_id with the value contained in the subscription
    /// addon. The DE backend currently does not support this. Do a delete->add
    /// instead.
    #[prost(bool, tag="3")]
    pub update_addon_id: bool,
    /// Whether to update the subscription_id field with the value contained
    /// in the subscription addon. The DE backend currently does not support this.
    /// Do a delete->add instead.
    #[prost(bool, tag="4")]
    pub update_subscription_id: bool,
    /// Whether to update the amount field with the value contained in the 
    /// subscription addon.
    #[prost(bool, tag="5")]
    pub update_amount: bool,
    /// Whether to update the paid fields with the value contained in the 
    /// subscription addon.
    #[prost(bool, tag="6")]
    pub update_paid: bool,
}
/// *
/// Contains the subscription add-on returned by the request handler.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionAddonResponse {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information generated by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The subscription add-on returned by the request handler.
    #[prost(message, optional, tag="3")]
    pub subscription_addon: ::core::option::Option<SubscriptionAddon>,
}
/// *
/// Contains a list of subscription add-ons returned by the request handler.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscriptionAddonListResponse {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information generated by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The list of subscription add-ons returned by the request handler.
    #[prost(message, repeated, tag="3")]
    pub subscription_addons: ::prost::alloc::vec::Vec<SubscriptionAddon>,
}
/// *
/// Represents when a user's resource type usage exceeds their configured
/// quota. Usually embedded in request and response message types.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Overage {
    /// The type of resource that is in overage. Usually data.size of cpu.hours.
    #[prost(string, tag="1")]
    pub resource_name: ::prost::alloc::string::String,
    /// The configured quota value for the resource type.
    #[prost(double, tag="2")]
    pub quota: f64,
    /// The actual usage value for the resource type.
    #[prost(double, tag="3")]
    pub usage: f64,
}
/// *
/// Returned by handlers in response to overage requests.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OverageResponse {
    /// The header used for passing telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Contains any errors generated by the handler emitting the response.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The overage returned by the handler emitting the response.
    #[prost(message, optional, tag="3")]
    pub overage: ::core::option::Option<Overage>,
}
/// *
/// A response message returned by handlers in response to overage related requests.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OverageList {
    /// The header used for passing telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Contains any errors generated by the handler emitting the response.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The list of overages returned by the handler emitting the response.
    #[prost(message, repeated, tag="3")]
    pub overages: ::prost::alloc::vec::Vec<Overage>,
}
/// *
/// A response message returned by handlers in response to overage related requests.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IsOverage {
    /// The header userd for passing telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Contains any errors generated by the handler emitting the response.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// Whether or not there is an overage.
    #[prost(bool, tag="3")]
    pub is_overage: bool,
}
/// *
/// A request for all of a user's current resource type overages.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AllUserOveragesRequest {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The user's username in the QMS system.
    #[prost(string, tag="2")]
    pub username: ::prost::alloc::string::String,
}
/// *
/// A request for a user's overages specific to a particular resource type.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserResourceOveragesRequest {
    /// Contains telemetry data.
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// A user's username.
    #[prost(string, tag="2")]
    pub username: ::prost::alloc::string::String,
    /// The name of the resource type to look up overages for.
    #[prost(string, tag="3")]
    pub resource_name: ::prost::alloc::string::String,
}
/// *
/// A request to check if a user is in overage for a particular resource.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IsOverageRequest {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// A username.
    #[prost(string, tag="2")]
    pub username: ::prost::alloc::string::String,
    /// The name of the resource type to check for usage overages by the user.
    #[prost(string, tag="3")]
    pub resource_name: ::prost::alloc::string::String,
}
/// *
/// A request to add a usage to the system for a resource type consumed by the
/// specified user.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddUsage {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    #[prost(string, tag="2")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub resource_name: ::prost::alloc::string::String,
    /// Possible values are defined in the database, so we can't use an enum here
    #[prost(string, tag="4")]
    pub update_type: ::prost::alloc::string::String,
    #[prost(double, tag="5")]
    pub usage_value: f64,
    #[prost(string, tag="6")]
    pub resource_unit: ::prost::alloc::string::String,
}
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUsages {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    #[prost(string, tag="2")]
    pub username: ::prost::alloc::string::String,
}
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestByUsername {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    #[prost(string, tag="2")]
    pub username: ::prost::alloc::string::String,
}
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestByUserId {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    #[prost(string, tag="2")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoParamsRequest {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
}
/// *
/// A representation of update operations, which are ways calling code can change
/// quota and usage value.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateOperation {
    /// The unique identifier 
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// The name of the update operation
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
}
/// *
/// A representation of an update to a quota or usage value.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Update {
    /// The unique identifier
    #[prost(string, tag="1")]
    #[validate(custom = "crate::custom_validator::validate_uuid")]
    pub uuid: ::prost::alloc::string::String,
    /// Determines whether the update is for a "quota" or "usage". 
    #[prost(string, tag="2")]
    pub value_type: ::prost::alloc::string::String,
    /// The value being applied to the usage or quota.
    #[prost(double, tag="3")]
    pub value: f64,
    /// The date the update takes effect.
    #[prost(message, optional, tag="4")]
    pub effective_date: ::core::option::Option<::pbjson_types::Timestamp>,
    /// The type of operation being done.
    #[prost(message, optional, tag="5")]
    pub operation: ::core::option::Option<UpdateOperation>,
    /// The resource type for the quota or usage being updated.
    #[prost(message, optional, tag="6")]
    pub resource_type: ::core::option::Option<ResourceType>,
    /// The user in the QMS system that the update is for.
    #[prost(message, optional, tag="7")]
    pub user: ::core::option::Option<QmsUser>,
}
/// *
/// A request to add an update to the system.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddUpdateRequest {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The update being added to the system.
    #[prost(message, optional, tag="2")]
    pub update: ::core::option::Option<Update>,
}
/// *
/// A response to requests to add an update to the system.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddUpdateResponse {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information returned by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The update added to the system.
    #[prost(message, optional, tag="3")]
    pub update: ::core::option::Option<Update>,
}
/// *
/// A request to get the list of updates generated by the specified user.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateListRequest {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// The user whose updates have been requested.
    #[prost(message, optional, tag="2")]
    pub user: ::core::option::Option<QmsUser>,
}
/// *
/// A response containing the requested list of updates generated by a user.
#[derive(validator::Validate)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateListResponse {
    /// Contains telemetry information
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    /// Error information returned by the request handler.
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
    /// The list of updates returned by the request handler.
    #[prost(message, repeated, tag="3")]
    pub updates: ::prost::alloc::vec::Vec<Update>,
}
include!("qms.serde.rs");
// @@protoc_insertion_point(module)
