// @generated
// This file is @generated by prost-build.
/// *
/// A request for user information. This is kept for backwards compatibility,
/// you should really use the other request types.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserLookupRequest {
    /// Whether to include user logins in the response.
    #[prost(bool, tag="5")]
    pub include_logins: bool,
    /// Whether to include user preferences in the response.
    #[prost(bool, tag="6")]
    pub include_preferences: bool,
    /// Whether to include saved searches in the response.
    #[prost(bool, tag="7")]
    pub include_saved_searches: bool,
    /// Paging limit.
    #[prost(uint32, tag="8")]
    pub login_limit: u32,
    /// Paging offset
    #[prost(uint32, tag="9")]
    pub login_offset: u32,
    /// Contains telemetry information
    #[prost(message, optional, tag="10")]
    pub header: ::core::option::Option<super::header::Header>,
    /// How to uniquely identify the user being looked up.
    #[prost(oneof="user_lookup_request::LookupIds", tags="1, 2, 3")]
    pub lookup_ids: ::core::option::Option<user_lookup_request::LookupIds>,
}
/// Nested message and enum types in `UserLookupRequest`.
pub mod user_lookup_request {
    /// How to uniquely identify the user being looked up.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum LookupIds {
        #[prost(string, tag="1")]
        Username(::prost::alloc::string::String),
        #[prost(string, tag="2")]
        UserId(::prost::alloc::string::String),
        #[prost(string, tag="3")]
        AnalysisId(::prost::alloc::string::String),
    }
}
/// *
/// A response to a request for information about a single user.
///
/// Please use the other, smaller requests and responses.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserLookupResponse {
    #[prost(message, optional, tag="1")]
    pub header: ::core::option::Option<super::header::Header>,
    #[prost(message, optional, tag="2")]
    pub basic_info: ::core::option::Option<super::user::User>,
    #[prost(message, repeated, tag="3")]
    pub logins: ::prost::alloc::vec::Vec<super::user::Login>,
    #[prost(message, optional, tag="4")]
    pub preferences: ::core::option::Option<super::user::Preferences>,
    #[prost(message, repeated, tag="5")]
    pub saved_searches: ::prost::alloc::vec::Vec<super::user::SavedSearches>,
    #[prost(message, optional, tag="7")]
    pub error: ::core::option::Option<super::svcerror::ServiceError>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserRequest {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<super::user::UserRef>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserResponse {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<super::user::UserRef>,
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::Error>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserPreferencesRequest {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<super::user::UserRef>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetUserPreferencesRequest {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<super::user::UserRef>,
    #[prost(string, tag="2")]
    pub preferences: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteUserPreferencesRequest {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<super::user::UserRef>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserPreferencesResponse {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<super::user::UserRef>,
    #[prost(string, optional, tag="2")]
    pub preferences: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="3")]
    pub error: ::core::option::Option<super::svcerror::Error>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PageSettings {
    #[prost(int32, tag="1")]
    pub offset: i32,
    #[prost(int32, tag="2")]
    pub number: i32,
    #[prost(int32, tag="3")]
    pub size: i32,
}
/// Don't expose this over the wire. 
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InternalPaginationContinuationToken {
    #[prost(int32, optional, tag="1")]
    pub offset: ::core::option::Option<i32>,
    #[prost(int32, optional, tag="2")]
    pub number: ::core::option::Option<i32>,
    #[prost(int32, optional, tag="3")]
    pub size: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLoginsRequest {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<super::user::UserRef>,
    #[prost(string, optional, tag="2")]
    pub continuation: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag="3")]
    pub page: ::core::option::Option<PageSettings>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddLoginRequest {
    #[prost(message, optional, tag="1")]
    pub login: ::core::option::Option<super::user::LoginWire>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginsResponse {
    #[prost(message, optional, tag="1")]
    pub list: ::core::option::Option<super::user::LoginListWire>,
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::Error>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSavedSearchesRequest {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<super::user::UserRef>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSavedSearchesRequest {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<super::user::UserRef>,
    #[prost(message, optional, tag="2")]
    pub searches: ::core::option::Option<super::user::SavedSearchesWire>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteSavedSearchesRequest {
    #[prost(message, optional, tag="1")]
    pub user: ::core::option::Option<super::user::UserRef>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SavedSearchesResponse {
    #[prost(message, optional, tag="1")]
    pub searches: ::core::option::Option<super::user::SavedSearchesWire>,
    #[prost(message, optional, tag="2")]
    pub error: ::core::option::Option<super::svcerror::Error>,
}
include!("user_requests.serde.rs");
// @@protoc_insertion_point(module)
