syntax = "proto3";

package qms;

import "header.proto";
import "svcerror.proto";
import "qms_resource_types.proto";

option go_package = "github.com/cyverse-de/p/go/qms";

option java_multiple_files = true;
option java_package = "org.cyverse.de.protobufs";
option java_outer_classname = "QMSPlansProtobufs";

/**
 * Represents a default quota value used in plans. Can be overridden on a
 * per-user basis for a subscription to provide customized quotas. Also referred to
 * as plan quota defaults.
 */
message QuotaDefault {
    // The unique identifier/primary key for the quota default.
    string uuid = 1;

    // The value of the quota default.
    double quota_value = 2 [json_name = "quota_value"];

    // The resource type the quota applies to.
    ResourceType resource_type = 3 [json_name = "resource_type"];

    // The date that quota default becomes effective. There can be multiple quota defaults for the same resource type,
    // and the quota default that is currently effective is always the one with the most recent effective date that
    // occurs in the past.
    google.protobuf.Timestamp effective_date = 4 [json_name = "effective_date"];
}

/**
 * A response type for quota default requests.
 */
message QuotaDefaultResponse {
    // Can contain telemetry data.
    header.Header header = 1;

    // Contains error info from the request handler.
    svcerror.ServiceError error = 2;

    // The quota default object returned by the request handler.
    QuotaDefault quota_default = 3 [json_name = "quota_default"];
}

/**
 * A response type for quota default requests that contains a list of quota
 * defaults.
 */
message QuotaDefaultList {
    // Can contain telemetry data.
    header.Header header = 1;

    // Contains error info from the request handler.
    svcerror.ServiceError error = 2;

    // The list of quota default objects returned by the request handler.
    repeated QuotaDefault quota_defaults = 3 [json_name = "quota_defaults"];
}

/**
 * Represents a price for a subscription plan.
 */
message PlanRate {
    // The unique identifier/primary key for the plan rate.
    string uuid = 1;

    // The subscription plan rate, that is the price for 1 year of service.
    double rate = 2;

    // The date that the rate becomes effective. There can be multiple rates for a subscription, and the rate that is
    // currently effective is always the one with the most recent effective date that occurs in the past.
    google.protobuf.Timestamp effective_date = 3 [json_name = "effective_date"];
}

/**
 * A response type for plan rate requests.
 */
message PlanRateResponse {
    // Can contain telemetry data.
    header.Header header = 1;

    // Contains error info from the request handler.
    svcerror.ServiceError error = 2;

    // The plan rate object returned by the request handler.
    PlanRate plan_rate = 3 [plan_rate = "plan_rate"];
}

/**
 * A response type for plan rate requests that contains a list of plan rates.
 */
message PlanRateList {
    // Can contain telemetry data.
    header.Header header = 1;

    // Contains error info from the request handler.
    svcerror.ServiceError error = 2;

    // The list of plan rate objects returned by the request handler.
    repeated PlanRate plan_rates = [json_name = "plan_rates"];
}

/**
 * Represents a subscription plan available to users.
 */
message Plan {
    // Unique identifier for the plan.
    string uuid = 1;

    // The name of the plan.
    string name = 2;

    // A description of the plan.
    string description = 3;

    // A list of quota defaults associated with the plan. Each resource type can have more than one plan quota
    // default. The effective quota default for each resource type is the one with the most recent effective date that
    // occurs in the past.
    repeated QuotaDefault plan_quota_defaults  = 4 [json_name = "plan_quota_defaults"];

    // The list of plan rates. There may be multiple plan rates associated with the plan. The effective rate is always
    // the rate with the most recent effective date that occurs in the past.
    repeated PlanRate plan_rates = 5 [json_name = "plan_rates"];
}

/**
 * A response to a plan request. Contains a single plan.
 */
message PlanResponse {
    // Contains telemtry data.
    header.Header header = 1;

    // Contains error data returned by the request handler.
    svcerror.ServiceError error  = 2;

    // The plan returned by the request handler.
    Plan plan = 3;
}

/**
 * A response to a plan request. Contains a list of plans.
 */
message PlanList {
    // Contains telemetry data.
    header.Header header = 1;

    // Contains error data returned by the request handler.
    svcerror.ServiceError error = 2;

    // A list of plans returned by the request handler.
    repeated Plan plans = 3;
}

/**
 * A request for plan information specified by the plan's unique identifier.
 */
message PlanRequest {
    // Contains telemetry data.
    header.Header header = 1;

    // The unique identifier of the plan being requested.
    string plan_id = 2 [json_name = "plan_id"];
}

/**
 * A request to add a new plan to the system.
 */
message AddPlanRequest {
    // Contains telemetry data.
    header.Header header = 1;

    // The plan to add to the system.
    Plan plan = 2;
}

/**
 * A request to add a quota default to an existing plan.
 */
message AddPlanQuotaDefaultRequest {
    // Contains telemetry data.
    header.Header header = 1;

    // The name of the plan to add the quota default to.
    string plan_name = 2 [json_name = "plan_name"];

    // The quota default to add to the plan specified by the plan_name field.
    QuotaDefault quota_default = 3 [json_name = "quota_default"];
}

/**
 * A request to add a rate to an existing plan.
 */
message AddPlanRateRequest {
    // Can contain telemetry data.
    header.Header header = 1;

    // The name of the plan to add the rate to.
    string plan_name = 2 [json_name = "plan_name"];

    // The rate to add to the plan specified by the plan_name field.
    PlanRate plan_rate = 3 [json_name = "plan_rate"];
}
