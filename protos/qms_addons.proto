syntax = "proto3";

package qms;

import "header.proto";
import "svcerror.proto";
import "qms_resource_types.proto";
import "qms_subscriptions.proto";

option go_package = "github.com/cyverse-de/p/go/qms";

option java_multiple_files = true;
option java_package = "org.cyverse.de.protobufs";
option java_outer_classname = "QMSAddonProtobufs";

/**
 * Represents an add-on that can be applied to a subscription to provide a user
 * with a change in a resource quota.
 */
message Addon {
    // The unique identifier.
    string uuid = 1;

    // The name of the add-on.
    string name = 2;

    // The description of the add-on.
    string description = 3;

    // The resource type of the add-on.
    ResourceType resource_type = 4 [json_name = "resource_type"];

    // How much of the resource type is added to the quota by the add-on.
    float default_amount = 5 [json_name = "default_amount"];

    // Whether a user must pay for the add-on. Not whether the user has paid.
    bool default_paid = 6 [json_name = "default_paid"];
}

/**
 * A response to an add-on request. Contains a single add-on.
 */
 message AddonResponse {
    // Contains telemetry data.
    header.Header header = 1;

    // Error information generated by the request handler.
    svcerror.ServiceError error = 2;

    // The add-on returned by the request handler.
    Addon addon = 3;
 }

 /**
  * A response to an add-on request that contains a list of add-ons.
  */
  message AddonListResponse {
    // Contains telemetry data.
    header.Header header = 1;

    // Error information generated by the request handler.
    svcerror.ServiceError error = 2;

    // The list of add-ons returned by the request handler.
    repeated Addon addons = 3;
  }

/**
* A request to add an add-on to the system.
*/
message AddAddonRequest {
    // Contains telemetry information.
    header.Header header = 1;

    // The add-on to be added.
    Addon addon = 2;
}

/**
 * A request to get information about an add-on.
 */
 message AddonLookupRequest {
    // Contains telemetry information.
    header.Header header = 1;

    // Either the add-on's id or name.
    oneof addon {
        string uuid = 2;
        string name = 3;
    }
}

/**
 * A request to update an add-on. The boolean fields are needed because Go (and
 * probably other languages) needs a way to tell when to set a field to an empty
 * string, since that's the zero value for a string.
 */
 message UpdateAddonRequest {
    // Contains telemetry information.
    header.Header header = 1;

    // The values to set in the update.
    Addon addon = 2;

    // Whether to update the name of the addon.
    bool update_name = 3;

    // Whether to update the description of the addon.
    bool update_description = 4;

    // Whether to update the resource type of the addon.
    bool update_resource_type = 5;

    // Whether to update the default amount of the addon.
    bool update_default_amount = 6;

    // Whether to update the default paid field of the addon.
    bool update_default_paid = 7;
 }

/**
 * SubscriptionAddon is an add-on that has been applied to a subscription. It 
 * contains fields that can override the the default_amount and default_paid 
 * fields in the subscription.
 */
message SubscriptionAddon {
    // The unique identifier for the add-on
    string uuid = 1;

    // The add-on used with the subscription. May only contain the add-on's 
    // UUID in some circumstances.
    Addon addon = 2;

    // The subscription the add-on was applied to. May only contain the add-on's
    // UUID in some circumstances.
    Subscription subscription = 3;

    // The amount of the resource applied by the add-on. This should default to
    // the amount contained in the add-on definition, but can be overridden, 
    // which is why it's a separate field here.
    float amount = 4;

    // Whether the subscription add-on costs money. This should default to the 
    // same paid value contained in the add-on definition, but can be overridden,
    // which is whay it's a separate field here.
    bool paid = 5;
}

/**
 * Contains the information needed to update a subscription add-on.
 */
message UpdateSubscriptionAddonRequest {
    // Contains telemetry information.
    header.Header header = 1;

    // The subscription add-on information being updated. Does not necessarily
    // have all fields set and the UUID field should not be set.
    SubscriptionAddon subscription_addon = 2 [json_name = "subscription_addon"];
    
    // Whether to update the addon_id with the value contained in the subscription
    // addon. The DE backend currently does not support this. Do a delete->add
    // instead.
    bool update_addon_id = 3 [json_name = "update_addon_id"];

    // Whether to update the subscription_id field with the value contained
    // in the subscription addon. The DE backend currently does not support this.
    // Do a delete->add instead.
    bool update_subscription_id = 4 [json_name = "update_subscription_id"];

    // Whether to update the amount field with the value contained in the 
    // subscription addon.
    bool update_amount = 5 [json_name = "update_amount"];

    // Whether to update the paid fields with the value contained in the 
    // subscription addon.
    bool update_paid = 6 [json_name = "update_paid"];
}

/**
 * Contains the subscription add-on returned by the request handler.
 */
message SubscriptionAddonResponse {
    // Contains telemetry information
    header.Header header = 1;

    // Error information generated by the request handler.
    svcerror.ServiceError error = 2;

    // The subscription add-on returned by the request handler.
    SubscriptionAddon subscription_addon = 3 [json_name = "subscription_addon"];
}

/**
 * Contains a list of subscription add-ons returned by the request handler.
 */
message SubscriptionAddonListResponse {
    // Contains telemetry information
    header.Header header = 1;

    // Error information generated by the request handler.
    svcerror.ServiceError error = 2;

    // The list of subscription add-ons returned by the request handler.
    repeated SubscriptionAddon subscription_addons = 3 [json_name = "subscription_addons"];
}