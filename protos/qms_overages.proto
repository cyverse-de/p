syntax = "proto3";

package qms;

import "header.proto";
import "svcerror.proto";

option go_package = "github.com/cyverse-de/p/go/qms";

option java_multiple_files = true;
option java_package = "org.cyverse.de.protobufs";
option java_outer_classname = "QMSOveragesProtobufs";

/**
 * Represents when a user's resource type usage exceeds their configured
 * quota. Usually embedded in request and response message types.
 */
message Overage {
    // The type of resource that is in overage. Usually data.size of cpu.hours.
    string resource_name = 1 [json_name = "resource_name"];

    // The configured quota value for the resource type.
    double quota = 2;

    // The actual usage value for the resource type.
    double usage = 3;
}


/**
 * Returned by handlers in response to overage requests.
 */
message OverageResponse {
    // The header used for passing telemetry data.
    header.Header header = 1;

    // Contains any errors generated by the handler emitting the response.
    svcerror.ServiceError error = 2;

    // The overage returned by the handler emitting the response.
    Overage overage  = 3;
}

/**
 * A response message returned by handlers in response to overage related requests.
 */
message OverageList {
    // The header used for passing telemetry data.
    header.Header header = 1;

    // Contains any errors generated by the handler emitting the response.
    svcerror.ServiceError error = 2;

    // The list of overages returned by the handler emitting the response.
    repeated Overage overages = 3;
}

/**
 * A response message returned by handlers in response to overage related requests.
 */
message IsOverage {
    // The header userd for passing telemetry data.
    header.Header header = 1;

    // Contains any errors generated by the handler emitting the response.
    svcerror.ServiceError error = 2;

    // Whether or not there is an overage.
    bool is_overage = 3 [json_name = "is_overage"];
}