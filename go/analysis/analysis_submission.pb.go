// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: analysis_submission.proto

package analysis

import (
	containers "github.com/cyverse-de/p/go/containers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HTCondorExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraRequirements string `protobuf:"bytes,1,opt,name=extra_requirements,json=extraRequirements,proto3" json:"extra_requirements,omitempty"`
}

func (x *HTCondorExtraInfo) Reset() {
	*x = HTCondorExtraInfo{}
	mi := &file_analysis_submission_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTCondorExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTCondorExtraInfo) ProtoMessage() {}

func (x *HTCondorExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTCondorExtraInfo.ProtoReflect.Descriptor instead.
func (*HTCondorExtraInfo) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{0}
}

func (x *HTCondorExtraInfo) GetExtraRequirements() string {
	if x != nil {
		return x.ExtraRequirements
	}
	return ""
}

type Extra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HtCondor *HTCondorExtraInfo `protobuf:"bytes,1,opt,name=ht_condor,json=htCondor,proto3" json:"ht_condor,omitempty"`
}

func (x *Extra) Reset() {
	*x = Extra{}
	mi := &file_analysis_submission_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extra) ProtoMessage() {}

func (x *Extra) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extra.ProtoReflect.Descriptor instead.
func (*Extra) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{1}
}

func (x *Extra) GetHtCondor() *HTCondorExtraInfo {
	if x != nil {
		return x.HtCondor
	}
	return nil
}

type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute string `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Unit      string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	mi := &file_analysis_submission_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{2}
}

func (x *FileMetadata) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *FileMetadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FileMetadata) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component   *Step_Component   `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	Config      *Step_Config      `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Type        string            `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	StdinPath   string            `protobuf:"bytes,4,opt,name=stdin_path,json=stdin,proto3" json:"stdin_path,omitempty"`
	StdoutPath  string            `protobuf:"bytes,5,opt,name=stdout_path,json=stdout,proto3" json:"stdout_path,omitempty"`
	StderrPath  string            `protobuf:"bytes,6,opt,name=stderr_path,json=stderr,proto3" json:"stderr_path,omitempty"`
	LogFile     string            `protobuf:"bytes,7,opt,name=log_file,json=log-file,proto3" json:"log_file,omitempty"`
	Environment map[string]string `protobuf:"bytes,8,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Input       []*Step_Input     `protobuf:"bytes,9,rep,name=input,proto3" json:"input,omitempty"`    // It's really annoying, but this is singular for backwards compatibility.
	Output      []*Step_Output    `protobuf:"bytes,10,rep,name=output,proto3" json:"output,omitempty"` // It's really annoying, but this is singular for backwards compatibility.
}

func (x *Step) Reset() {
	*x = Step{}
	mi := &file_analysis_submission_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{3}
}

func (x *Step) GetComponent() *Step_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *Step) GetConfig() *Step_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Step) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Step) GetStdinPath() string {
	if x != nil {
		return x.StdinPath
	}
	return ""
}

func (x *Step) GetStdoutPath() string {
	if x != nil {
		return x.StdoutPath
	}
	return ""
}

func (x *Step) GetStderrPath() string {
	if x != nil {
		return x.StderrPath
	}
	return ""
}

func (x *Step) GetLogFile() string {
	if x != nil {
		return x.LogFile
	}
	return ""
}

func (x *Step) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *Step) GetInput() []*Step_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Step) GetOutput() []*Step_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

type AnalysisSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppDescription     string                 `protobuf:"bytes,1,opt,name=app_description,proto3" json:"app_description,omitempty"`
	AppId              string                 `protobuf:"bytes,2,opt,name=app_id,proto3" json:"app_id,omitempty"`
	AppName            string                 `protobuf:"bytes,3,opt,name=app_name,proto3" json:"app_name,omitempty"`
	ArchiveLogs        bool                   `protobuf:"varint,4,opt,name=archive_logs,proto3" json:"archive_logs,omitempty"`
	BatchId            string                 `protobuf:"bytes,5,opt,name=batch_id,proto3" json:"batch_id,omitempty"`
	CondorId           string                 `protobuf:"bytes,6,opt,name=condor_id,proto3" json:"condor_id,omitempty"`
	CondorLogPath      string                 `protobuf:"bytes,7,opt,name=condor_log_path,proto3" json:"condor_log_path,omitempty"`
	CreateOutputSubdir bool                   `protobuf:"varint,8,opt,name=create_output_subdir,proto3" json:"create_output_subdir,omitempty"`
	DateSubmitted      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=date_submitted,proto3" json:"date_submitted,omitempty"`
	DateStarted        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=date_started,proto3" json:"date_started,omitempty"`
	DateCompleted      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=date_completed,proto3" json:"date_completed,omitempty"`
	Description        string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Email              string                 `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	Extra              *Extra                 `protobuf:"bytes,14,opt,name=extra,proto3" json:"extra,omitempty"` // read all about it
	ExecutionTarget    string                 `protobuf:"bytes,15,opt,name=execution_target,proto3" json:"execution_target,omitempty"`
	ExitCode           int32                  `protobuf:"varint,16,opt,name=exit_code,proto3" json:"exit_code,omitempty"`
	FailureCount       int64                  `protobuf:"varint,17,opt,name=failure_count,proto3" json:"failure_count,omitempty"`
	FailureThreshold   int64                  `protobuf:"varint,18,opt,name=failure_threshold,proto3" json:"failure_threshold,omitempty"`
	FileMetadata       []*FileMetadata        `protobuf:"bytes,19,rep,name=file_metadata,json=file-metadata,proto3" json:"file_metadata,omitempty"` // The - is used instead of _ for backwards compatibility.
	FilterFiles        []string               `protobuf:"bytes,20,rep,name=filter_files,proto3" json:"filter_files,omitempty"`
	Group              string                 `protobuf:"bytes,21,opt,name=group,proto3" json:"group,omitempty"`
	InputPathListFile  string                 `protobuf:"bytes,22,opt,name=input_path_list_file,json=input_path_list,proto3" json:"input_path_list_file,omitempty"`
	InputTicketsFile   string                 `protobuf:"bytes,23,opt,name=input_tickets_file,json=input_ticket_list,proto3" json:"input_tickets_file,omitempty"`
	InvocationId       string                 `protobuf:"bytes,24,opt,name=invocation_id,proto3" json:"invocation_id,omitempty"` // AKA the external ID.
	IrodsBase          string                 `protobuf:"bytes,25,opt,name=irods_base,proto3" json:"irods_base,omitempty"`
	Name               string                 `protobuf:"bytes,26,opt,name=name,proto3" json:"name,omitempty"`
	NfsBase            string                 `protobuf:"bytes,27,opt,name=nfs_base,proto3" json:"nfs_base,omitempty"`
	Notify             bool                   `protobuf:"varint,28,opt,name=notify,proto3" json:"notify,omitempty"`
	NowDate            string                 `protobuf:"bytes,29,opt,name=now_date,proto3" json:"now_date,omitempty"`
	OutputDir          string                 `protobuf:"bytes,30,opt,name=output_dir,proto3" json:"output_dir,omitempty"`
	OutputDirTicket    string                 `protobuf:"bytes,31,opt,name=output_dir_ticket,proto3" json:"output_dir_ticket,omitempty"`
	OutputTicketFile   string                 `protobuf:"bytes,32,opt,name=output_ticket_file,proto3" json:"output_ticket_file,omitempty"`
	RequestType        string                 `protobuf:"bytes,33,opt,name=request_type,proto3" json:"request_type,omitempty"`
	RunOnNfs           bool                   `protobuf:"varint,34,opt,name=run_on_nfs,json=run-on-nfs,proto3" json:"run_on_nfs,omitempty"`                           // The - is on purpose.
	SkipParentMetadata bool                   `protobuf:"varint,35,opt,name=skip_parent_metadata,json=skip-parent-meta,proto3" json:"skip_parent_metadata,omitempty"` // The - is on purpose.
	Steps              []*Step                `protobuf:"bytes,36,rep,name=steps,proto3" json:"steps,omitempty"`
	SubmissionDate     string                 `protobuf:"bytes,37,opt,name=submission_date,proto3" json:"submission_date,omitempty"`
	Submitter          string                 `protobuf:"bytes,38,opt,name=submitter,json=username,proto3" json:"submitter,omitempty"` // Yup, the JSON name is completely different from the field name.
	Type               string                 `protobuf:"bytes,39,opt,name=type,proto3" json:"type,omitempty"`
	UserId             string                 `protobuf:"bytes,40,opt,name=user_id,proto3" json:"user_id,omitempty"`
	UserGroups         []string               `protobuf:"bytes,41,rep,name=user_groups,proto3" json:"user_groups,omitempty"`
	UserHome           string                 `protobuf:"bytes,42,opt,name=user_home,proto3" json:"user_home,omitempty"`
	WikiUrl            string                 `protobuf:"bytes,43,opt,name=wiki_url,proto3" json:"wiki_url,omitempty"`
	ConfigFile         string                 `protobuf:"bytes,44,opt,name=config_file,proto3" json:"config_file,omitempty"`
}

func (x *AnalysisSubmission) Reset() {
	*x = AnalysisSubmission{}
	mi := &file_analysis_submission_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSubmission) ProtoMessage() {}

func (x *AnalysisSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSubmission.ProtoReflect.Descriptor instead.
func (*AnalysisSubmission) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{4}
}

func (x *AnalysisSubmission) GetAppDescription() string {
	if x != nil {
		return x.AppDescription
	}
	return ""
}

func (x *AnalysisSubmission) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AnalysisSubmission) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AnalysisSubmission) GetArchiveLogs() bool {
	if x != nil {
		return x.ArchiveLogs
	}
	return false
}

func (x *AnalysisSubmission) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *AnalysisSubmission) GetCondorId() string {
	if x != nil {
		return x.CondorId
	}
	return ""
}

func (x *AnalysisSubmission) GetCondorLogPath() string {
	if x != nil {
		return x.CondorLogPath
	}
	return ""
}

func (x *AnalysisSubmission) GetCreateOutputSubdir() bool {
	if x != nil {
		return x.CreateOutputSubdir
	}
	return false
}

func (x *AnalysisSubmission) GetDateSubmitted() *timestamppb.Timestamp {
	if x != nil {
		return x.DateSubmitted
	}
	return nil
}

func (x *AnalysisSubmission) GetDateStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.DateStarted
	}
	return nil
}

func (x *AnalysisSubmission) GetDateCompleted() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCompleted
	}
	return nil
}

func (x *AnalysisSubmission) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnalysisSubmission) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AnalysisSubmission) GetExtra() *Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *AnalysisSubmission) GetExecutionTarget() string {
	if x != nil {
		return x.ExecutionTarget
	}
	return ""
}

func (x *AnalysisSubmission) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *AnalysisSubmission) GetFailureCount() int64 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *AnalysisSubmission) GetFailureThreshold() int64 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

func (x *AnalysisSubmission) GetFileMetadata() []*FileMetadata {
	if x != nil {
		return x.FileMetadata
	}
	return nil
}

func (x *AnalysisSubmission) GetFilterFiles() []string {
	if x != nil {
		return x.FilterFiles
	}
	return nil
}

func (x *AnalysisSubmission) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AnalysisSubmission) GetInputPathListFile() string {
	if x != nil {
		return x.InputPathListFile
	}
	return ""
}

func (x *AnalysisSubmission) GetInputTicketsFile() string {
	if x != nil {
		return x.InputTicketsFile
	}
	return ""
}

func (x *AnalysisSubmission) GetInvocationId() string {
	if x != nil {
		return x.InvocationId
	}
	return ""
}

func (x *AnalysisSubmission) GetIrodsBase() string {
	if x != nil {
		return x.IrodsBase
	}
	return ""
}

func (x *AnalysisSubmission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnalysisSubmission) GetNfsBase() string {
	if x != nil {
		return x.NfsBase
	}
	return ""
}

func (x *AnalysisSubmission) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

func (x *AnalysisSubmission) GetNowDate() string {
	if x != nil {
		return x.NowDate
	}
	return ""
}

func (x *AnalysisSubmission) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *AnalysisSubmission) GetOutputDirTicket() string {
	if x != nil {
		return x.OutputDirTicket
	}
	return ""
}

func (x *AnalysisSubmission) GetOutputTicketFile() string {
	if x != nil {
		return x.OutputTicketFile
	}
	return ""
}

func (x *AnalysisSubmission) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *AnalysisSubmission) GetRunOnNfs() bool {
	if x != nil {
		return x.RunOnNfs
	}
	return false
}

func (x *AnalysisSubmission) GetSkipParentMetadata() bool {
	if x != nil {
		return x.SkipParentMetadata
	}
	return false
}

func (x *AnalysisSubmission) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *AnalysisSubmission) GetSubmissionDate() string {
	if x != nil {
		return x.SubmissionDate
	}
	return ""
}

func (x *AnalysisSubmission) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *AnalysisSubmission) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AnalysisSubmission) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalysisSubmission) GetUserGroups() []string {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

func (x *AnalysisSubmission) GetUserHome() string {
	if x != nil {
		return x.UserHome
	}
	return ""
}

func (x *AnalysisSubmission) GetWikiUrl() string {
	if x != nil {
		return x.WikiUrl
	}
	return ""
}

func (x *AnalysisSubmission) GetConfigFile() string {
	if x != nil {
		return x.ConfigFile
	}
	return ""
}

// Since protocol buffers don't have a way to alias messages, we're copying the Analysis definition into Job and deprecating it.
//
// Deprecated: Marked as deprecated in analysis_submission.proto.
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppDescription     string                 `protobuf:"bytes,1,opt,name=app_description,proto3" json:"app_description,omitempty"`
	AppId              string                 `protobuf:"bytes,2,opt,name=app_id,proto3" json:"app_id,omitempty"`
	AppName            string                 `protobuf:"bytes,3,opt,name=app_name,proto3" json:"app_name,omitempty"`
	ArchiveLogs        bool                   `protobuf:"varint,4,opt,name=archive_logs,proto3" json:"archive_logs,omitempty"`
	BatchId            string                 `protobuf:"bytes,5,opt,name=batch_id,proto3" json:"batch_id,omitempty"`
	CondorId           string                 `protobuf:"bytes,6,opt,name=condor_id,proto3" json:"condor_id,omitempty"`
	CondorLogPath      string                 `protobuf:"bytes,7,opt,name=condor_log_path,proto3" json:"condor_log_path,omitempty"`
	CreateOutputSubdir bool                   `protobuf:"varint,8,opt,name=create_output_subdir,proto3" json:"create_output_subdir,omitempty"`
	DateSubmitted      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=date_submitted,proto3" json:"date_submitted,omitempty"`
	DateStarted        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=date_started,proto3" json:"date_started,omitempty"`
	DateCompleted      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=date_completed,proto3" json:"date_completed,omitempty"`
	Description        string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Email              string                 `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	Extra              *Extra                 `protobuf:"bytes,14,opt,name=extra,proto3" json:"extra,omitempty"` // read all about it
	ExecutionTarget    string                 `protobuf:"bytes,15,opt,name=execution_target,proto3" json:"execution_target,omitempty"`
	ExitCode           int32                  `protobuf:"varint,16,opt,name=exit_code,proto3" json:"exit_code,omitempty"`
	FailureCount       int64                  `protobuf:"varint,17,opt,name=failure_count,proto3" json:"failure_count,omitempty"`
	FailureThreshold   int64                  `protobuf:"varint,18,opt,name=failure_threshold,proto3" json:"failure_threshold,omitempty"`
	FileMetadata       []*FileMetadata        `protobuf:"bytes,19,rep,name=file_metadata,json=file-metadata,proto3" json:"file_metadata,omitempty"` // The - is used instead of _ for backwards compatibility.
	FilterFiles        []string               `protobuf:"bytes,20,rep,name=filter_files,proto3" json:"filter_files,omitempty"`
	Group              string                 `protobuf:"bytes,21,opt,name=group,proto3" json:"group,omitempty"`
	InputPathListFile  string                 `protobuf:"bytes,22,opt,name=input_path_list_file,json=input_path_list,proto3" json:"input_path_list_file,omitempty"`
	InputTicketsFile   string                 `protobuf:"bytes,23,opt,name=input_tickets_file,json=input_ticket_list,proto3" json:"input_tickets_file,omitempty"`
	InvocationId       string                 `protobuf:"bytes,24,opt,name=invocation_id,proto3" json:"invocation_id,omitempty"` // AKA the external ID.
	IrodsBase          string                 `protobuf:"bytes,25,opt,name=irods_base,proto3" json:"irods_base,omitempty"`
	Name               string                 `protobuf:"bytes,26,opt,name=name,proto3" json:"name,omitempty"`
	NfsBase            string                 `protobuf:"bytes,27,opt,name=nfs_base,proto3" json:"nfs_base,omitempty"`
	Notify             bool                   `protobuf:"varint,28,opt,name=notify,proto3" json:"notify,omitempty"`
	NowDate            string                 `protobuf:"bytes,29,opt,name=now_date,proto3" json:"now_date,omitempty"`
	OutputDir          string                 `protobuf:"bytes,30,opt,name=output_dir,proto3" json:"output_dir,omitempty"`
	OutputDirTicket    string                 `protobuf:"bytes,31,opt,name=output_dir_ticket,proto3" json:"output_dir_ticket,omitempty"`
	OutputTicketFile   string                 `protobuf:"bytes,32,opt,name=output_ticket_file,proto3" json:"output_ticket_file,omitempty"`
	RequestType        string                 `protobuf:"bytes,33,opt,name=request_type,proto3" json:"request_type,omitempty"`
	RunOnNfs           bool                   `protobuf:"varint,34,opt,name=run_on_nfs,json=run-on-nfs,proto3" json:"run_on_nfs,omitempty"`                           // The - is on purpose.
	SkipParentMetadata bool                   `protobuf:"varint,35,opt,name=skip_parent_metadata,json=skip-parent-meta,proto3" json:"skip_parent_metadata,omitempty"` // The - is on purpose.
	Steps              []*Step                `protobuf:"bytes,36,rep,name=steps,proto3" json:"steps,omitempty"`
	SubmissionDate     string                 `protobuf:"bytes,37,opt,name=submission_date,proto3" json:"submission_date,omitempty"`
	Submitter          string                 `protobuf:"bytes,38,opt,name=submitter,json=username,proto3" json:"submitter,omitempty"` // Yup, the JSON name is completely different from the field name.
	Type               string                 `protobuf:"bytes,39,opt,name=type,proto3" json:"type,omitempty"`
	UserId             string                 `protobuf:"bytes,40,opt,name=user_id,proto3" json:"user_id,omitempty"`
	UserGroups         []string               `protobuf:"bytes,41,rep,name=user_groups,proto3" json:"user_groups,omitempty"`
	UserHome           string                 `protobuf:"bytes,42,opt,name=user_home,proto3" json:"user_home,omitempty"`
	WikiUrl            string                 `protobuf:"bytes,43,opt,name=wiki_url,proto3" json:"wiki_url,omitempty"`
	ConfigFile         string                 `protobuf:"bytes,44,opt,name=config_file,proto3" json:"config_file,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_analysis_submission_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{5}
}

func (x *Job) GetAppDescription() string {
	if x != nil {
		return x.AppDescription
	}
	return ""
}

func (x *Job) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Job) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Job) GetArchiveLogs() bool {
	if x != nil {
		return x.ArchiveLogs
	}
	return false
}

func (x *Job) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *Job) GetCondorId() string {
	if x != nil {
		return x.CondorId
	}
	return ""
}

func (x *Job) GetCondorLogPath() string {
	if x != nil {
		return x.CondorLogPath
	}
	return ""
}

func (x *Job) GetCreateOutputSubdir() bool {
	if x != nil {
		return x.CreateOutputSubdir
	}
	return false
}

func (x *Job) GetDateSubmitted() *timestamppb.Timestamp {
	if x != nil {
		return x.DateSubmitted
	}
	return nil
}

func (x *Job) GetDateStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.DateStarted
	}
	return nil
}

func (x *Job) GetDateCompleted() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCompleted
	}
	return nil
}

func (x *Job) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Job) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Job) GetExtra() *Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Job) GetExecutionTarget() string {
	if x != nil {
		return x.ExecutionTarget
	}
	return ""
}

func (x *Job) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *Job) GetFailureCount() int64 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *Job) GetFailureThreshold() int64 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

func (x *Job) GetFileMetadata() []*FileMetadata {
	if x != nil {
		return x.FileMetadata
	}
	return nil
}

func (x *Job) GetFilterFiles() []string {
	if x != nil {
		return x.FilterFiles
	}
	return nil
}

func (x *Job) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Job) GetInputPathListFile() string {
	if x != nil {
		return x.InputPathListFile
	}
	return ""
}

func (x *Job) GetInputTicketsFile() string {
	if x != nil {
		return x.InputTicketsFile
	}
	return ""
}

func (x *Job) GetInvocationId() string {
	if x != nil {
		return x.InvocationId
	}
	return ""
}

func (x *Job) GetIrodsBase() string {
	if x != nil {
		return x.IrodsBase
	}
	return ""
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetNfsBase() string {
	if x != nil {
		return x.NfsBase
	}
	return ""
}

func (x *Job) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

func (x *Job) GetNowDate() string {
	if x != nil {
		return x.NowDate
	}
	return ""
}

func (x *Job) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *Job) GetOutputDirTicket() string {
	if x != nil {
		return x.OutputDirTicket
	}
	return ""
}

func (x *Job) GetOutputTicketFile() string {
	if x != nil {
		return x.OutputTicketFile
	}
	return ""
}

func (x *Job) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *Job) GetRunOnNfs() bool {
	if x != nil {
		return x.RunOnNfs
	}
	return false
}

func (x *Job) GetSkipParentMetadata() bool {
	if x != nil {
		return x.SkipParentMetadata
	}
	return false
}

func (x *Job) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Job) GetSubmissionDate() string {
	if x != nil {
		return x.SubmissionDate
	}
	return ""
}

func (x *Job) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *Job) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Job) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Job) GetUserGroups() []string {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

func (x *Job) GetUserHome() string {
	if x != nil {
		return x.UserHome
	}
	return ""
}

func (x *Job) GetWikiUrl() string {
	if x != nil {
		return x.WikiUrl
	}
	return ""
}

func (x *Job) GetConfigFile() string {
	if x != nil {
		return x.ConfigFile
	}
	return ""
}

type Step_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container     *containers.Container `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Type          string                `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name          string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Location      string                `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Description   string                `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	TimeLimit     int32                 `protobuf:"varint,6,opt,name=time_limit,json=time_limit_seconds,proto3" json:"time_limit,omitempty"`
	Restricted    bool                  `protobuf:"varint,7,opt,name=restricted,proto3" json:"restricted,omitempty"`
	IsInteractive bool                  `protobuf:"varint,8,opt,name=is_interactive,json=interactive,proto3" json:"is_interactive,omitempty"`
}

func (x *Step_Component) Reset() {
	*x = Step_Component{}
	mi := &file_analysis_submission_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step_Component) ProtoMessage() {}

func (x *Step_Component) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step_Component.ProtoReflect.Descriptor instead.
func (*Step_Component) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Step_Component) GetContainer() *containers.Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Step_Component) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Step_Component) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Step_Component) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Step_Component) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Step_Component) GetTimeLimit() int32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *Step_Component) GetRestricted() bool {
	if x != nil {
		return x.Restricted
	}
	return false
}

func (x *Step_Component) GetIsInteractive() bool {
	if x != nil {
		return x.IsInteractive
	}
	return false
}

type Step_Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Order int32  `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	Type  string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Path  string `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Step_Param) Reset() {
	*x = Step_Param{}
	mi := &file_analysis_submission_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step_Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step_Param) ProtoMessage() {}

func (x *Step_Param) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step_Param.ProtoReflect.Descriptor instead.
func (*Step_Param) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Step_Param) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Step_Param) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Step_Param) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Step_Param) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Step_Param) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Step_Param) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Step_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params  []*Step_Param  `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	Inputs  []*Step_Input  `protobuf:"bytes,2,rep,name=inputs,json=input,proto3" json:"inputs,omitempty"`    // Keep it singular in the JSON for backwards-compatibility.
	Outputs []*Step_Output `protobuf:"bytes,3,rep,name=outputs,json=output,proto3" json:"outputs,omitempty"` // Keep it singular in the JSON for backwards-compatibility.
}

func (x *Step_Config) Reset() {
	*x = Step_Config{}
	mi := &file_analysis_submission_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step_Config) ProtoMessage() {}

func (x *Step_Config) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step_Config.ProtoReflect.Descriptor instead.
func (*Step_Config) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Step_Config) GetParams() []*Step_Param {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Step_Config) GetInputs() []*Step_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Step_Config) GetOutputs() []*Step_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type Step_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ticket       string `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Multiplicity string `protobuf:"bytes,3,opt,name=multiplicity,proto3" json:"multiplicity,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Property     string `protobuf:"bytes,5,opt,name=property,proto3" json:"property,omitempty"`
	Retain       bool   `protobuf:"varint,6,opt,name=retain,proto3" json:"retain,omitempty"`
	Type         string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Value        string `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Step_Input) Reset() {
	*x = Step_Input{}
	mi := &file_analysis_submission_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step_Input) ProtoMessage() {}

func (x *Step_Input) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step_Input.ProtoReflect.Descriptor instead.
func (*Step_Input) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Step_Input) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Step_Input) GetTicket() string {
	if x != nil {
		return x.Ticket
	}
	return ""
}

func (x *Step_Input) GetMultiplicity() string {
	if x != nil {
		return x.Multiplicity
	}
	return ""
}

func (x *Step_Input) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Step_Input) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *Step_Input) GetRetain() bool {
	if x != nil {
		return x.Retain
	}
	return false
}

func (x *Step_Input) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Step_Input) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Step_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multiplicity string `protobuf:"bytes,1,opt,name=multiplicity,proto3" json:"multiplicity,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Property     string `protobuf:"bytes,3,opt,name=property,proto3" json:"property,omitempty"`
	QualId       string `protobuf:"bytes,4,opt,name=qual_id,json=qual-id,proto3" json:"qual_id,omitempty"`
	Retain       bool   `protobuf:"varint,5,opt,name=retain,proto3" json:"retain,omitempty"`
	Type         string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Step_Output) Reset() {
	*x = Step_Output{}
	mi := &file_analysis_submission_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Step_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step_Output) ProtoMessage() {}

func (x *Step_Output) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_submission_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step_Output.ProtoReflect.Descriptor instead.
func (*Step_Output) Descriptor() ([]byte, []int) {
	return file_analysis_submission_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Step_Output) GetMultiplicity() string {
	if x != nil {
		return x.Multiplicity
	}
	return ""
}

func (x *Step_Output) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Step_Output) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *Step_Output) GetQualId() string {
	if x != nil {
		return x.QualId
	}
	return ""
}

func (x *Step_Output) GetRetain() bool {
	if x != nil {
		return x.Retain
	}
	return false
}

func (x *Step_Output) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_analysis_submission_proto protoreflect.FileDescriptor

var file_analysis_submission_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x11, 0x48, 0x54, 0x43, 0x6f,
	0x6e, 0x64, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a,
	0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x05,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x48, 0x54, 0x43, 0x6f, 0x6e, 0x64, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x6f, 0x72, 0x22,
	0x56, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xea, 0x0a, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x0a, 0x73,
	0x74, 0x64, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x65,
	0x70, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x93, 0x02, 0x0a, 0x09, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x1a, 0x7f, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x1a, 0x93, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0xc5, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0xa2, 0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xfe, 0x0c, 0x0a, 0x12, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x70, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x64, 0x69, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2a, 0x0a, 0x10,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x2d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x2d, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x72, 0x6f, 0x64, 0x73, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x72, 0x6f, 0x64,
	0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x66,
	0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x66,
	0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69,
	0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x75, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x66, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x75, 0x6e, 0x2d, 0x6f, 0x6e, 0x2d, 0x6e, 0x66, 0x73, 0x12, 0x2e, 0x0a, 0x14,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70,
	0x2d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6b, 0x69, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x6b, 0x69, 0x5f,
	0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xf3, 0x0c, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2a,
	0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x65, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x72, 0x6f, 0x64,
	0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x72,
	0x6f, 0x64, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x66, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x66, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x64, 0x69, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x66, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x2d, 0x6f, 0x6e, 0x2d, 0x6e, 0x66, 0x73, 0x12, 0x2e,
	0x0a, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6b,
	0x69, 0x70, 0x2d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6b,
	0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x6b,
	0x69, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x5e, 0x0a, 0x18, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x79, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x42, 0x1b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x73, 0x50, 0x01, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2d, 0x64, 0x65, 0x2f, 0x70, 0x2f,
	0x67, 0x6f, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_analysis_submission_proto_rawDescOnce sync.Once
	file_analysis_submission_proto_rawDescData = file_analysis_submission_proto_rawDesc
)

func file_analysis_submission_proto_rawDescGZIP() []byte {
	file_analysis_submission_proto_rawDescOnce.Do(func() {
		file_analysis_submission_proto_rawDescData = protoimpl.X.CompressGZIP(file_analysis_submission_proto_rawDescData)
	})
	return file_analysis_submission_proto_rawDescData
}

var file_analysis_submission_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_analysis_submission_proto_goTypes = []any{
	(*HTCondorExtraInfo)(nil),     // 0: analysis.HTCondorExtraInfo
	(*Extra)(nil),                 // 1: analysis.Extra
	(*FileMetadata)(nil),          // 2: analysis.FileMetadata
	(*Step)(nil),                  // 3: analysis.Step
	(*AnalysisSubmission)(nil),    // 4: analysis.AnalysisSubmission
	(*Job)(nil),                   // 5: analysis.Job
	(*Step_Component)(nil),        // 6: analysis.Step.Component
	(*Step_Param)(nil),            // 7: analysis.Step.Param
	(*Step_Config)(nil),           // 8: analysis.Step.Config
	(*Step_Input)(nil),            // 9: analysis.Step.Input
	(*Step_Output)(nil),           // 10: analysis.Step.Output
	nil,                           // 11: analysis.Step.EnvironmentEntry
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*containers.Container)(nil),  // 13: containers.Container
}
var file_analysis_submission_proto_depIdxs = []int32{
	0,  // 0: analysis.Extra.ht_condor:type_name -> analysis.HTCondorExtraInfo
	6,  // 1: analysis.Step.component:type_name -> analysis.Step.Component
	8,  // 2: analysis.Step.config:type_name -> analysis.Step.Config
	11, // 3: analysis.Step.environment:type_name -> analysis.Step.EnvironmentEntry
	9,  // 4: analysis.Step.input:type_name -> analysis.Step.Input
	10, // 5: analysis.Step.output:type_name -> analysis.Step.Output
	12, // 6: analysis.AnalysisSubmission.date_submitted:type_name -> google.protobuf.Timestamp
	12, // 7: analysis.AnalysisSubmission.date_started:type_name -> google.protobuf.Timestamp
	12, // 8: analysis.AnalysisSubmission.date_completed:type_name -> google.protobuf.Timestamp
	1,  // 9: analysis.AnalysisSubmission.extra:type_name -> analysis.Extra
	2,  // 10: analysis.AnalysisSubmission.file_metadata:type_name -> analysis.FileMetadata
	3,  // 11: analysis.AnalysisSubmission.steps:type_name -> analysis.Step
	12, // 12: analysis.Job.date_submitted:type_name -> google.protobuf.Timestamp
	12, // 13: analysis.Job.date_started:type_name -> google.protobuf.Timestamp
	12, // 14: analysis.Job.date_completed:type_name -> google.protobuf.Timestamp
	1,  // 15: analysis.Job.extra:type_name -> analysis.Extra
	2,  // 16: analysis.Job.file_metadata:type_name -> analysis.FileMetadata
	3,  // 17: analysis.Job.steps:type_name -> analysis.Step
	13, // 18: analysis.Step.Component.container:type_name -> containers.Container
	7,  // 19: analysis.Step.Config.params:type_name -> analysis.Step.Param
	9,  // 20: analysis.Step.Config.inputs:type_name -> analysis.Step.Input
	10, // 21: analysis.Step.Config.outputs:type_name -> analysis.Step.Output
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_analysis_submission_proto_init() }
func file_analysis_submission_proto_init() {
	if File_analysis_submission_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analysis_submission_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_analysis_submission_proto_goTypes,
		DependencyIndexes: file_analysis_submission_proto_depIdxs,
		MessageInfos:      file_analysis_submission_proto_msgTypes,
	}.Build()
	File_analysis_submission_proto = out.File
	file_analysis_submission_proto_rawDesc = nil
	file_analysis_submission_proto_goTypes = nil
	file_analysis_submission_proto_depIdxs = nil
}
