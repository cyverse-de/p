// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: containers.proto

package containers

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A container volume. Used for mapping host paths into a container.
//
// Correlates to the 'container_volumes' table in the 'de' database.
type Volume struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The absolute path to a file/directory on the container host/k8s node.
	HostPath string `protobuf:"bytes,1,opt,name=host_path,proto3" json:"host_path,omitempty"`
	// The path to mount the host path to inside of the container.
	ContainerPath string `protobuf:"bytes,2,opt,name=container_path,proto3" json:"container_path,omitempty"`
	// Whether the mount point in the container should be read only.
	ReadOnly bool `protobuf:"varint,3,opt,name=read_only,proto3" json:"read_only,omitempty"`
	// The mode the mount point should have once mounted.
	Mode          string `protobuf:"bytes,4,opt,name=mode,proto3" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Volume) Reset() {
	*x = Volume{}
	mi := &file_containers_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{0}
}

func (x *Volume) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *Volume) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

func (x *Volume) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *Volume) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

// *
// A port the container exposes.
//
// Correlates to the 'container_ports' table in the 'de' database.
type Port struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The port on the host that the container port should be mapped to. Usually unset.
	HostPort int32 `protobuf:"varint,1,opt,name=host_port,proto3" json:"host_port,omitempty"`
	// The port the contained process needs to have open.
	ContainerPort int32 `protobuf:"varint,2,opt,name=container_port,proto3" json:"container_port,omitempty"`
	// Whether to bind the container port to the host port. Normally left to false/null/None.
	BindToHost    bool `protobuf:"varint,3,opt,name=bind_to_host,proto3" json:"bind_to_host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Port) Reset() {
	*x = Port{}
	mi := &file_containers_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{1}
}

func (x *Port) GetHostPort() int32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *Port) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *Port) GetBindToHost() bool {
	if x != nil {
		return x.BindToHost
	}
	return false
}

// *
// A host device that the container needs access to.
//
// Correlates to the 'container_devices' table in the 'de' database.
type Device struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The path to the device on the host.
	HostPath string `protobuf:"bytes,1,opt,name=host_path,proto3" json:"host_path,omitempty"`
	// The path to the device in the container.
	ContainerPath string `protobuf:"bytes,2,opt,name=container_path,proto3" json:"container_path,omitempty"`
	// The permissions needed to mount the device.
	CgroupPermissions string `protobuf:"bytes,3,opt,name=cgroup_permissions,proto3" json:"cgroup_permissions,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_containers_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{2}
}

func (x *Device) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *Device) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

func (x *Device) GetCgroupPermissions() string {
	if x != nil {
		return x.CgroupPermissions
	}
	return ""
}

// *
// Another container from which the container should mount volumes.
//
// Correlates to the 'container_volumes_from' table in the 'de' database.
type VolumesFrom struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The image tag for the mountee container.
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// The name of the mountee container.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Authentication information needed to pull the mountee container image.
	Auth string `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	// The prefix that should be given to the name of the container.
	NamePrefix string `protobuf:"bytes,4,opt,name=name_prefix,proto3" json:"name_prefix,omitempty"`
	// The URL to the mountee container image.
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// The path inside the mountee container that should be mounted.
	HostPath string `protobuf:"bytes,6,opt,name=host_path,proto3" json:"host_path,omitempty"`
	// The path to the mount point inside the mounting container.
	ContainerPath string `protobuf:"bytes,7,opt,name=container_path,proto3" json:"container_path,omitempty"`
	// Whether the mount point is read only.
	ReadOnly      bool `protobuf:"varint,8,opt,name=read_only,proto3" json:"read_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VolumesFrom) Reset() {
	*x = VolumesFrom{}
	mi := &file_containers_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumesFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumesFrom) ProtoMessage() {}

func (x *VolumesFrom) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumesFrom.ProtoReflect.Descriptor instead.
func (*VolumesFrom) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{3}
}

func (x *VolumesFrom) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *VolumesFrom) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumesFrom) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *VolumesFrom) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

func (x *VolumesFrom) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VolumesFrom) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *VolumesFrom) GetContainerPath() string {
	if x != nil {
		return x.ContainerPath
	}
	return ""
}

func (x *VolumesFrom) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

// *
// Information about a container image.
//
// Correlates to the 'container_images' table in the 'de' database.
type Image struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID of the container image.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the container image.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The container image's tag.
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// The URL for the image.
	Url string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// The path to the image in OSG. Might be blank.
	OsgImagePath  string `protobuf:"bytes,6,opt,name=osg_image_path,proto3" json:"osg_image_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_containers_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{4}
}

func (x *Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Image) GetOsgImagePath() string {
	if x != nil {
		return x.OsgImagePath
	}
	return ""
}

// *
// Contains information needed to launch an app in VICE.
//
// Corresponds roughly to to the 'interactive_apps_proxy_settings' table in the 'de' database.
type InteractiveApps struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The image containing the proxy application that requests to a VICE app flow through.
	ProxyImage string `protobuf:"bytes,1,opt,name=proxy_image,json=proxyImage,proto3" json:"proxy_image,omitempty"`
	// The name of the proxy container.
	ProxyName string `protobuf:"bytes,2,opt,name=proxy_name,json=proxyName,proto3" json:"proxy_name,omitempty"`
	// The URL the proxy will redirect users to when necessary.
	FrontendUrl string `protobuf:"bytes,3,opt,name=frontend_url,json=frontendUrl,proto3" json:"frontend_url,omitempty"`
	// The URL to the CAS instance needed for authentication.
	CasUrl string `protobuf:"bytes,4,opt,name=cas_url,json=casUrl,proto3" json:"cas_url,omitempty"`
	// The URL to the CAS authentication validation.
	CasValidate string `protobuf:"bytes,5,opt,name=cas_validate,json=casValidate,proto3" json:"cas_validate,omitempty"`
	// The path to the SSL cert in the container.
	SslCertPath string `protobuf:"bytes,6,opt,name=ssl_cert_path,json=sslCertPath,proto3" json:"ssl_cert_path,omitempty"`
	// The path to the SSL key in the container.
	SslKeyPath string `protobuf:"bytes,7,opt,name=ssl_key_path,json=sslKeyPath,proto3" json:"ssl_key_path,omitempty"`
	// Unused.
	WebsocketPath string `protobuf:"bytes,8,opt,name=websocket_path,json=websocketPath,proto3" json:"websocket_path,omitempty"`
	// Unused.
	WebsocketPort string `protobuf:"bytes,9,opt,name=websocket_port,json=websocketPort,proto3" json:"websocket_port,omitempty"`
	// Unused.
	WebsocketProto string `protobuf:"bytes,10,opt,name=websocket_proto,json=websocketProto,proto3" json:"websocket_proto,omitempty"`
	// Unused.
	BackendUrl    string `protobuf:"bytes,11,opt,name=backend_url,json=backendUrl,proto3" json:"backend_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InteractiveApps) Reset() {
	*x = InteractiveApps{}
	mi := &file_containers_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InteractiveApps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveApps) ProtoMessage() {}

func (x *InteractiveApps) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveApps.ProtoReflect.Descriptor instead.
func (*InteractiveApps) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{5}
}

func (x *InteractiveApps) GetProxyImage() string {
	if x != nil {
		return x.ProxyImage
	}
	return ""
}

func (x *InteractiveApps) GetProxyName() string {
	if x != nil {
		return x.ProxyName
	}
	return ""
}

func (x *InteractiveApps) GetFrontendUrl() string {
	if x != nil {
		return x.FrontendUrl
	}
	return ""
}

func (x *InteractiveApps) GetCasUrl() string {
	if x != nil {
		return x.CasUrl
	}
	return ""
}

func (x *InteractiveApps) GetCasValidate() string {
	if x != nil {
		return x.CasValidate
	}
	return ""
}

func (x *InteractiveApps) GetSslCertPath() string {
	if x != nil {
		return x.SslCertPath
	}
	return ""
}

func (x *InteractiveApps) GetSslKeyPath() string {
	if x != nil {
		return x.SslKeyPath
	}
	return ""
}

func (x *InteractiveApps) GetWebsocketPath() string {
	if x != nil {
		return x.WebsocketPath
	}
	return ""
}

func (x *InteractiveApps) GetWebsocketPort() string {
	if x != nil {
		return x.WebsocketPort
	}
	return ""
}

func (x *InteractiveApps) GetWebsocketProto() string {
	if x != nil {
		return x.WebsocketProto
	}
	return ""
}

func (x *InteractiveApps) GetBackendUrl() string {
	if x != nil {
		return x.BackendUrl
	}
	return ""
}

// *
// A representation of a container for an analysis.
//
// Correlates to the 'container_settings' table in the 'de' database..
type Container struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Volumes         []*Volume              `protobuf:"bytes,2,rep,name=volumes,json=container_volumes,proto3" json:"volumes,omitempty"`
	Devices         []*Device              `protobuf:"bytes,3,rep,name=devices,json=container_devices,proto3" json:"devices,omitempty"`
	VolumesFrom     []*VolumesFrom         `protobuf:"bytes,4,rep,name=volumes_from,json=container_volumes_from,proto3" json:"volumes_from,omitempty"`
	Name            string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	NetworkMode     string                 `protobuf:"bytes,6,opt,name=network_mode,proto3" json:"network_mode,omitempty"`
	CpuShares       int64                  `protobuf:"varint,7,opt,name=cpu_shares,proto3" json:"cpu_shares,omitempty"`
	InteractiveApps *InteractiveApps       `protobuf:"bytes,8,opt,name=interactive_apps,proto3" json:"interactive_apps,omitempty"`
	MemoryLimit     int64                  `protobuf:"varint,9,opt,name=memory_limit,proto3" json:"memory_limit,omitempty"`
	MinMemoryLimit  int64                  `protobuf:"varint,10,opt,name=min_memory_limit,proto3" json:"min_memory_limit,omitempty"`
	MaxCpuCores     float32                `protobuf:"fixed32,11,opt,name=max_cpu_cores,proto3" json:"max_cpu_cores,omitempty"`
	MinCpuCores     float32                `protobuf:"fixed32,12,opt,name=min_cpu_cores,proto3" json:"min_cpu_cores,omitempty"`
	MinDiskSpace    int64                  `protobuf:"varint,13,opt,name=min_disk_space,proto3" json:"min_disk_space,omitempty"`
	PidsLimit       int64                  `protobuf:"varint,14,opt,name=pids_limit,proto3" json:"pids_limit,omitempty"`
	Image           *Image                 `protobuf:"bytes,15,opt,name=image,proto3" json:"image,omitempty"`
	EntryPoint      string                 `protobuf:"bytes,16,opt,name=entry_point,json=entrypoint,proto3" json:"entry_point,omitempty"`
	WorkingDir      string                 `protobuf:"bytes,17,opt,name=working_dir,json=working_directory,proto3" json:"working_dir,omitempty"`
	Ports           []*Port                `protobuf:"bytes,18,rep,name=ports,proto3" json:"ports,omitempty"`
	SkipTmpMount    bool                   `protobuf:"varint,19,opt,name=skip_tmp_mount,proto3" json:"skip_tmp_mount,omitempty"`
	Uid             int32                  `protobuf:"varint,20,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Container) Reset() {
	*x = Container{}
	mi := &file_containers_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_containers_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_containers_proto_rawDescGZIP(), []int{6}
}

func (x *Container) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Container) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *Container) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Container) GetVolumesFrom() []*VolumesFrom {
	if x != nil {
		return x.VolumesFrom
	}
	return nil
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetNetworkMode() string {
	if x != nil {
		return x.NetworkMode
	}
	return ""
}

func (x *Container) GetCpuShares() int64 {
	if x != nil {
		return x.CpuShares
	}
	return 0
}

func (x *Container) GetInteractiveApps() *InteractiveApps {
	if x != nil {
		return x.InteractiveApps
	}
	return nil
}

func (x *Container) GetMemoryLimit() int64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *Container) GetMinMemoryLimit() int64 {
	if x != nil {
		return x.MinMemoryLimit
	}
	return 0
}

func (x *Container) GetMaxCpuCores() float32 {
	if x != nil {
		return x.MaxCpuCores
	}
	return 0
}

func (x *Container) GetMinCpuCores() float32 {
	if x != nil {
		return x.MinCpuCores
	}
	return 0
}

func (x *Container) GetMinDiskSpace() int64 {
	if x != nil {
		return x.MinDiskSpace
	}
	return 0
}

func (x *Container) GetPidsLimit() int64 {
	if x != nil {
		return x.PidsLimit
	}
	return 0
}

func (x *Container) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Container) GetEntryPoint() string {
	if x != nil {
		return x.EntryPoint
	}
	return ""
}

func (x *Container) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *Container) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Container) GetSkipTmpMount() bool {
	if x != nil {
		return x.SkipTmpMount
	}
	return false
}

func (x *Container) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

var File_containers_proto protoreflect.FileDescriptor

const file_containers_proto_rawDesc = "" +
	"\n" +
	"\x10containers.proto\x12\n" +
	"containers\"\x80\x01\n" +
	"\x06Volume\x12\x1c\n" +
	"\thost_path\x18\x01 \x01(\tR\thost_path\x12&\n" +
	"\x0econtainer_path\x18\x02 \x01(\tR\x0econtainer_path\x12\x1c\n" +
	"\tread_only\x18\x03 \x01(\bR\tread_only\x12\x12\n" +
	"\x04mode\x18\x04 \x01(\tR\x04mode\"p\n" +
	"\x04Port\x12\x1c\n" +
	"\thost_port\x18\x01 \x01(\x05R\thost_port\x12&\n" +
	"\x0econtainer_port\x18\x02 \x01(\x05R\x0econtainer_port\x12\"\n" +
	"\fbind_to_host\x18\x03 \x01(\bR\fbind_to_host\"~\n" +
	"\x06Device\x12\x1c\n" +
	"\thost_path\x18\x01 \x01(\tR\thost_path\x12&\n" +
	"\x0econtainer_path\x18\x02 \x01(\tR\x0econtainer_path\x12.\n" +
	"\x12cgroup_permissions\x18\x03 \x01(\tR\x12cgroup_permissions\"\xdf\x01\n" +
	"\vVolumesFrom\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\tR\x03tag\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04auth\x18\x03 \x01(\tR\x04auth\x12 \n" +
	"\vname_prefix\x18\x04 \x01(\tR\vname_prefix\x12\x10\n" +
	"\x03url\x18\x05 \x01(\tR\x03url\x12\x1c\n" +
	"\thost_path\x18\x06 \x01(\tR\thost_path\x12&\n" +
	"\x0econtainer_path\x18\a \x01(\tR\x0econtainer_path\x12\x1c\n" +
	"\tread_only\x18\b \x01(\bR\tread_only\"}\n" +
	"\x05Image\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03tag\x18\x03 \x01(\tR\x03tag\x12\x10\n" +
	"\x03url\x18\x05 \x01(\tR\x03url\x12&\n" +
	"\x0eosg_image_path\x18\x06 \x01(\tR\x0eosg_image_pathJ\x04\b\x04\x10\x05\"\x8e\x03\n" +
	"\x0fInteractiveApps\x12\x1f\n" +
	"\vproxy_image\x18\x01 \x01(\tR\n" +
	"proxyImage\x12\x1d\n" +
	"\n" +
	"proxy_name\x18\x02 \x01(\tR\tproxyName\x12!\n" +
	"\ffrontend_url\x18\x03 \x01(\tR\vfrontendUrl\x12\x17\n" +
	"\acas_url\x18\x04 \x01(\tR\x06casUrl\x12!\n" +
	"\fcas_validate\x18\x05 \x01(\tR\vcasValidate\x12\"\n" +
	"\rssl_cert_path\x18\x06 \x01(\tR\vsslCertPath\x12 \n" +
	"\fssl_key_path\x18\a \x01(\tR\n" +
	"sslKeyPath\x12%\n" +
	"\x0ewebsocket_path\x18\b \x01(\tR\rwebsocketPath\x12%\n" +
	"\x0ewebsocket_port\x18\t \x01(\tR\rwebsocketPort\x12'\n" +
	"\x0fwebsocket_proto\x18\n" +
	" \x01(\tR\x0ewebsocketProto\x12\x1f\n" +
	"\vbackend_url\x18\v \x01(\tR\n" +
	"backendUrl\"\xab\x06\n" +
	"\tContainer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x126\n" +
	"\avolumes\x18\x02 \x03(\v2\x12.containers.VolumeR\x11container_volumes\x126\n" +
	"\adevices\x18\x03 \x03(\v2\x12.containers.DeviceR\x11container_devices\x12E\n" +
	"\fvolumes_from\x18\x04 \x03(\v2\x17.containers.VolumesFromR\x16container_volumes_from\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\"\n" +
	"\fnetwork_mode\x18\x06 \x01(\tR\fnetwork_mode\x12\x1e\n" +
	"\n" +
	"cpu_shares\x18\a \x01(\x03R\n" +
	"cpu_shares\x12G\n" +
	"\x10interactive_apps\x18\b \x01(\v2\x1b.containers.InteractiveAppsR\x10interactive_apps\x12\"\n" +
	"\fmemory_limit\x18\t \x01(\x03R\fmemory_limit\x12*\n" +
	"\x10min_memory_limit\x18\n" +
	" \x01(\x03R\x10min_memory_limit\x12$\n" +
	"\rmax_cpu_cores\x18\v \x01(\x02R\rmax_cpu_cores\x12$\n" +
	"\rmin_cpu_cores\x18\f \x01(\x02R\rmin_cpu_cores\x12&\n" +
	"\x0emin_disk_space\x18\r \x01(\x03R\x0emin_disk_space\x12\x1e\n" +
	"\n" +
	"pids_limit\x18\x0e \x01(\x03R\n" +
	"pids_limit\x12'\n" +
	"\x05image\x18\x0f \x01(\v2\x11.containers.ImageR\x05image\x12\x1f\n" +
	"\ventry_point\x18\x10 \x01(\tR\n" +
	"entrypoint\x12&\n" +
	"\vworking_dir\x18\x11 \x01(\tR\x11working_directory\x12&\n" +
	"\x05ports\x18\x12 \x03(\v2\x10.containers.PortR\x05ports\x12&\n" +
	"\x0eskip_tmp_mount\x18\x13 \x01(\bR\x0eskip_tmp_mount\x12\x10\n" +
	"\x03uid\x18\x14 \x01(\x05R\x03uidBX\n" +
	"\x18org.cyverse.de.protobufsB\x13ContainersProtobufsP\x01Z%github.com/cyverse-de/p/go/containersb\x06proto3"

var (
	file_containers_proto_rawDescOnce sync.Once
	file_containers_proto_rawDescData []byte
)

func file_containers_proto_rawDescGZIP() []byte {
	file_containers_proto_rawDescOnce.Do(func() {
		file_containers_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_containers_proto_rawDesc), len(file_containers_proto_rawDesc)))
	})
	return file_containers_proto_rawDescData
}

var file_containers_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_containers_proto_goTypes = []any{
	(*Volume)(nil),          // 0: containers.Volume
	(*Port)(nil),            // 1: containers.Port
	(*Device)(nil),          // 2: containers.Device
	(*VolumesFrom)(nil),     // 3: containers.VolumesFrom
	(*Image)(nil),           // 4: containers.Image
	(*InteractiveApps)(nil), // 5: containers.InteractiveApps
	(*Container)(nil),       // 6: containers.Container
}
var file_containers_proto_depIdxs = []int32{
	0, // 0: containers.Container.volumes:type_name -> containers.Volume
	2, // 1: containers.Container.devices:type_name -> containers.Device
	3, // 2: containers.Container.volumes_from:type_name -> containers.VolumesFrom
	5, // 3: containers.Container.interactive_apps:type_name -> containers.InteractiveApps
	4, // 4: containers.Container.image:type_name -> containers.Image
	1, // 5: containers.Container.ports:type_name -> containers.Port
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_containers_proto_init() }
func file_containers_proto_init() {
	if File_containers_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_containers_proto_rawDesc), len(file_containers_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_containers_proto_goTypes,
		DependencyIndexes: file_containers_proto_depIdxs,
		MessageInfos:      file_containers_proto_msgTypes,
	}.Build()
	File_containers_proto = out.File
	file_containers_proto_goTypes = nil
	file_containers_proto_depIdxs = nil
}
