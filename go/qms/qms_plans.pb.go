// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: qms_plans.proto

package qms

import (
	header "github.com/cyverse-de/p/go/header"
	svcerror "github.com/cyverse-de/p/go/svcerror"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Represents a default quota value used in plans. Can be overridden on a
// per-user basis for a subscription to provide customized quotas. Also referred to
// as plan quota defaults.
type QuotaDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier/primary key for the quota default.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The value of the quota default.
	QuotaValue float64 `protobuf:"fixed64,2,opt,name=quota_value,proto3" json:"quota_value,omitempty"`
	// The resource type the quota applies to.
	ResourceType *ResourceType `protobuf:"bytes,3,opt,name=resource_type,proto3" json:"resource_type,omitempty"`
	// The date that quota default becomes effective. There can be multiple quota defaults for the same resource type,
	// and the quota default that is currently effective is always the one with the most recent effective date that
	// occurs in the past.
	EffectiveDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=effective_date,proto3" json:"effective_date,omitempty"`
}

func (x *QuotaDefault) Reset() {
	*x = QuotaDefault{}
	mi := &file_qms_plans_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotaDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaDefault) ProtoMessage() {}

func (x *QuotaDefault) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaDefault.ProtoReflect.Descriptor instead.
func (*QuotaDefault) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{0}
}

func (x *QuotaDefault) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *QuotaDefault) GetQuotaValue() float64 {
	if x != nil {
		return x.QuotaValue
	}
	return 0
}

func (x *QuotaDefault) GetResourceType() *ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *QuotaDefault) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

// *
// A response type for quota default requests.
type QuotaDefaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can contain telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Contains error info from the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The quota default object returned by the request handler.
	QuotaDefault *QuotaDefault `protobuf:"bytes,3,opt,name=quota_default,proto3" json:"quota_default,omitempty"`
}

func (x *QuotaDefaultResponse) Reset() {
	*x = QuotaDefaultResponse{}
	mi := &file_qms_plans_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotaDefaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaDefaultResponse) ProtoMessage() {}

func (x *QuotaDefaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaDefaultResponse.ProtoReflect.Descriptor instead.
func (*QuotaDefaultResponse) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{1}
}

func (x *QuotaDefaultResponse) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *QuotaDefaultResponse) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *QuotaDefaultResponse) GetQuotaDefault() *QuotaDefault {
	if x != nil {
		return x.QuotaDefault
	}
	return nil
}

// *
// A response type for quota default requests that contains a list of quota
// defaults.
type QuotaDefaultList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can contain telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Contains error info from the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The list of quota default objects returned by the request handler.
	QuotaDefaults []*QuotaDefault `protobuf:"bytes,3,rep,name=quota_defaults,proto3" json:"quota_defaults,omitempty"`
}

func (x *QuotaDefaultList) Reset() {
	*x = QuotaDefaultList{}
	mi := &file_qms_plans_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotaDefaultList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaDefaultList) ProtoMessage() {}

func (x *QuotaDefaultList) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaDefaultList.ProtoReflect.Descriptor instead.
func (*QuotaDefaultList) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{2}
}

func (x *QuotaDefaultList) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *QuotaDefaultList) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *QuotaDefaultList) GetQuotaDefaults() []*QuotaDefault {
	if x != nil {
		return x.QuotaDefaults
	}
	return nil
}

// *
// Represents a price for a subscription plan.
type PlanRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier/primary key for the plan rate.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The subscription plan rate, that is the price for 1 year of service.
	Rate float64 `protobuf:"fixed64,2,opt,name=rate,proto3" json:"rate,omitempty"`
	// The date that the rate becomes effective. There can be multiple rates for a subscription, and the rate that is
	// currently effective is always the one with the most recent effective date that occurs in the past.
	EffectiveDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=effective_date,proto3" json:"effective_date,omitempty"`
}

func (x *PlanRate) Reset() {
	*x = PlanRate{}
	mi := &file_qms_plans_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRate) ProtoMessage() {}

func (x *PlanRate) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRate.ProtoReflect.Descriptor instead.
func (*PlanRate) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{3}
}

func (x *PlanRate) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PlanRate) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *PlanRate) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

// *
// A response type for plan rate requests.
type PlanRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can contain telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Contains error info from the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The plan rate object returned by the request handler.
	PlanRate *PlanRate `protobuf:"bytes,3,opt,name=plan_rate,proto3" json:"plan_rate,omitempty"`
}

func (x *PlanRateResponse) Reset() {
	*x = PlanRateResponse{}
	mi := &file_qms_plans_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRateResponse) ProtoMessage() {}

func (x *PlanRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRateResponse.ProtoReflect.Descriptor instead.
func (*PlanRateResponse) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{4}
}

func (x *PlanRateResponse) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PlanRateResponse) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PlanRateResponse) GetPlanRate() *PlanRate {
	if x != nil {
		return x.PlanRate
	}
	return nil
}

// *
// A response type for plan rate requests that contains a list of plan rates.
type PlanRateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can contain telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Contains error info from the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The list of plan rate objects returned by the request handler.
	PlanRates []*PlanRate `protobuf:"bytes,3,rep,name=plan_rates,proto3" json:"plan_rates,omitempty"`
}

func (x *PlanRateList) Reset() {
	*x = PlanRateList{}
	mi := &file_qms_plans_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanRateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRateList) ProtoMessage() {}

func (x *PlanRateList) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRateList.ProtoReflect.Descriptor instead.
func (*PlanRateList) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{5}
}

func (x *PlanRateList) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PlanRateList) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PlanRateList) GetPlanRates() []*PlanRate {
	if x != nil {
		return x.PlanRates
	}
	return nil
}

// *
// Represents a subscription plan available to users.
type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the plan.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The name of the plan.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the plan.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A list of quota defaults associated with the plan. Each resource type can have more than one plan quota
	// default. The effective quota default for each resource type is the one with the most recent effective date that
	// occurs in the past.
	PlanQuotaDefaults []*QuotaDefault `protobuf:"bytes,4,rep,name=plan_quota_defaults,proto3" json:"plan_quota_defaults,omitempty"`
	// The list of plan rates. There may be multiple plan rates associated with the plan. The effective rate is always
	// the rate with the most recent effective date that occurs in the past.
	PlanRates []*PlanRate `protobuf:"bytes,5,rep,name=plan_rates,proto3" json:"plan_rates,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	mi := &file_qms_plans_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{6}
}

func (x *Plan) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Plan) GetPlanQuotaDefaults() []*QuotaDefault {
	if x != nil {
		return x.PlanQuotaDefaults
	}
	return nil
}

func (x *Plan) GetPlanRates() []*PlanRate {
	if x != nil {
		return x.PlanRates
	}
	return nil
}

// *
// A response to a plan request. Contains a single plan.
type PlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemtry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Contains error data returned by the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The plan returned by the request handler.
	Plan *Plan `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *PlanResponse) Reset() {
	*x = PlanResponse{}
	mi := &file_qms_plans_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResponse) ProtoMessage() {}

func (x *PlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResponse.ProtoReflect.Descriptor instead.
func (*PlanResponse) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{7}
}

func (x *PlanResponse) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PlanResponse) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PlanResponse) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

// *
// A response to a plan request. Contains a list of plans.
type PlanList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Contains error data returned by the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// A list of plans returned by the request handler.
	Plans []*Plan `protobuf:"bytes,3,rep,name=plans,proto3" json:"plans,omitempty"`
}

func (x *PlanList) Reset() {
	*x = PlanList{}
	mi := &file_qms_plans_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanList) ProtoMessage() {}

func (x *PlanList) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanList.ProtoReflect.Descriptor instead.
func (*PlanList) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{8}
}

func (x *PlanList) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PlanList) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PlanList) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

// *
// A request for plan information specified by the plan's unique identifier.
type PlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The unique identifier of the plan being requested.
	PlanId string `protobuf:"bytes,2,opt,name=plan_id,proto3" json:"plan_id,omitempty"`
}

func (x *PlanRequest) Reset() {
	*x = PlanRequest{}
	mi := &file_qms_plans_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRequest) ProtoMessage() {}

func (x *PlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRequest.ProtoReflect.Descriptor instead.
func (*PlanRequest) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{9}
}

func (x *PlanRequest) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PlanRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

// *
// A request to add a new plan to the system.
type AddPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The plan to add to the system.
	Plan *Plan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *AddPlanRequest) Reset() {
	*x = AddPlanRequest{}
	mi := &file_qms_plans_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPlanRequest) ProtoMessage() {}

func (x *AddPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPlanRequest.ProtoReflect.Descriptor instead.
func (*AddPlanRequest) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{10}
}

func (x *AddPlanRequest) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddPlanRequest) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

// *
// A request to add a quota default to an existing plan.
type AddPlanQuotaDefaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The name of the plan to add the quota default to.
	PlanName string `protobuf:"bytes,2,opt,name=plan_name,proto3" json:"plan_name,omitempty"`
	// The quota default to add to the plan specified by the plan_name field.
	QuotaDefault *QuotaDefault `protobuf:"bytes,3,opt,name=quota_default,proto3" json:"quota_default,omitempty"`
}

func (x *AddPlanQuotaDefaultRequest) Reset() {
	*x = AddPlanQuotaDefaultRequest{}
	mi := &file_qms_plans_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPlanQuotaDefaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPlanQuotaDefaultRequest) ProtoMessage() {}

func (x *AddPlanQuotaDefaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPlanQuotaDefaultRequest.ProtoReflect.Descriptor instead.
func (*AddPlanQuotaDefaultRequest) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{11}
}

func (x *AddPlanQuotaDefaultRequest) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddPlanQuotaDefaultRequest) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *AddPlanQuotaDefaultRequest) GetQuotaDefault() *QuotaDefault {
	if x != nil {
		return x.QuotaDefault
	}
	return nil
}

// *
// A request to add a rate to an existing plan.
type AddPlanRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can contain telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The name of the plan to add the rate to.
	PlanName string `protobuf:"bytes,2,opt,name=plan_name,proto3" json:"plan_name,omitempty"`
	// The rate to add to the plan specified by the plan_name field.
	PlanRate *PlanRate `protobuf:"bytes,3,opt,name=plan_rate,proto3" json:"plan_rate,omitempty"`
}

func (x *AddPlanRateRequest) Reset() {
	*x = AddPlanRateRequest{}
	mi := &file_qms_plans_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPlanRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPlanRateRequest) ProtoMessage() {}

func (x *AddPlanRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qms_plans_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPlanRateRequest.ProtoReflect.Descriptor instead.
func (*AddPlanRateRequest) Descriptor() ([]byte, []int) {
	return file_qms_plans_proto_rawDescGZIP(), []int{12}
}

func (x *AddPlanRateRequest) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddPlanRateRequest) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *AddPlanRateRequest) GetPlanRate() *PlanRate {
	if x != nil {
		return x.PlanRate
	}
	return nil
}

var File_qms_plans_proto protoreflect.FileDescriptor

var file_qms_plans_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x71, 0x6d, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x71, 0x6d, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x73, 0x76, 0x63, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x71, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc1, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x71, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x42, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x6d, 0x73, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x10,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x76, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71,
	0x6d, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x13, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x2d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x83,
	0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x87, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x4f, 0x0a, 0x18, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x79, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x42, 0x11, 0x51, 0x4d, 0x53, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x50, 0x01, 0x5a, 0x1e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2d,
	0x64, 0x65, 0x2f, 0x70, 0x2f, 0x67, 0x6f, 0x2f, 0x71, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_qms_plans_proto_rawDescOnce sync.Once
	file_qms_plans_proto_rawDescData = file_qms_plans_proto_rawDesc
)

func file_qms_plans_proto_rawDescGZIP() []byte {
	file_qms_plans_proto_rawDescOnce.Do(func() {
		file_qms_plans_proto_rawDescData = protoimpl.X.CompressGZIP(file_qms_plans_proto_rawDescData)
	})
	return file_qms_plans_proto_rawDescData
}

var file_qms_plans_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_qms_plans_proto_goTypes = []any{
	(*QuotaDefault)(nil),               // 0: qms.QuotaDefault
	(*QuotaDefaultResponse)(nil),       // 1: qms.QuotaDefaultResponse
	(*QuotaDefaultList)(nil),           // 2: qms.QuotaDefaultList
	(*PlanRate)(nil),                   // 3: qms.PlanRate
	(*PlanRateResponse)(nil),           // 4: qms.PlanRateResponse
	(*PlanRateList)(nil),               // 5: qms.PlanRateList
	(*Plan)(nil),                       // 6: qms.Plan
	(*PlanResponse)(nil),               // 7: qms.PlanResponse
	(*PlanList)(nil),                   // 8: qms.PlanList
	(*PlanRequest)(nil),                // 9: qms.PlanRequest
	(*AddPlanRequest)(nil),             // 10: qms.AddPlanRequest
	(*AddPlanQuotaDefaultRequest)(nil), // 11: qms.AddPlanQuotaDefaultRequest
	(*AddPlanRateRequest)(nil),         // 12: qms.AddPlanRateRequest
	(*ResourceType)(nil),               // 13: qms.ResourceType
	(*timestamppb.Timestamp)(nil),      // 14: google.protobuf.Timestamp
	(*header.Header)(nil),              // 15: header.Header
	(*svcerror.ServiceError)(nil),      // 16: svcerror.ServiceError
}
var file_qms_plans_proto_depIdxs = []int32{
	13, // 0: qms.QuotaDefault.resource_type:type_name -> qms.ResourceType
	14, // 1: qms.QuotaDefault.effective_date:type_name -> google.protobuf.Timestamp
	15, // 2: qms.QuotaDefaultResponse.header:type_name -> header.Header
	16, // 3: qms.QuotaDefaultResponse.error:type_name -> svcerror.ServiceError
	0,  // 4: qms.QuotaDefaultResponse.quota_default:type_name -> qms.QuotaDefault
	15, // 5: qms.QuotaDefaultList.header:type_name -> header.Header
	16, // 6: qms.QuotaDefaultList.error:type_name -> svcerror.ServiceError
	0,  // 7: qms.QuotaDefaultList.quota_defaults:type_name -> qms.QuotaDefault
	14, // 8: qms.PlanRate.effective_date:type_name -> google.protobuf.Timestamp
	15, // 9: qms.PlanRateResponse.header:type_name -> header.Header
	16, // 10: qms.PlanRateResponse.error:type_name -> svcerror.ServiceError
	3,  // 11: qms.PlanRateResponse.plan_rate:type_name -> qms.PlanRate
	15, // 12: qms.PlanRateList.header:type_name -> header.Header
	16, // 13: qms.PlanRateList.error:type_name -> svcerror.ServiceError
	3,  // 14: qms.PlanRateList.plan_rates:type_name -> qms.PlanRate
	0,  // 15: qms.Plan.plan_quota_defaults:type_name -> qms.QuotaDefault
	3,  // 16: qms.Plan.plan_rates:type_name -> qms.PlanRate
	15, // 17: qms.PlanResponse.header:type_name -> header.Header
	16, // 18: qms.PlanResponse.error:type_name -> svcerror.ServiceError
	6,  // 19: qms.PlanResponse.plan:type_name -> qms.Plan
	15, // 20: qms.PlanList.header:type_name -> header.Header
	16, // 21: qms.PlanList.error:type_name -> svcerror.ServiceError
	6,  // 22: qms.PlanList.plans:type_name -> qms.Plan
	15, // 23: qms.PlanRequest.header:type_name -> header.Header
	15, // 24: qms.AddPlanRequest.header:type_name -> header.Header
	6,  // 25: qms.AddPlanRequest.plan:type_name -> qms.Plan
	15, // 26: qms.AddPlanQuotaDefaultRequest.header:type_name -> header.Header
	0,  // 27: qms.AddPlanQuotaDefaultRequest.quota_default:type_name -> qms.QuotaDefault
	15, // 28: qms.AddPlanRateRequest.header:type_name -> header.Header
	3,  // 29: qms.AddPlanRateRequest.plan_rate:type_name -> qms.PlanRate
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_qms_plans_proto_init() }
func file_qms_plans_proto_init() {
	if File_qms_plans_proto != nil {
		return
	}
	file_qms_resource_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_qms_plans_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qms_plans_proto_goTypes,
		DependencyIndexes: file_qms_plans_proto_depIdxs,
		MessageInfos:      file_qms_plans_proto_msgTypes,
	}.Build()
	File_qms_plans_proto = out.File
	file_qms_plans_proto_rawDesc = nil
	file_qms_plans_proto_goTypes = nil
	file_qms_plans_proto_depIdxs = nil
}
