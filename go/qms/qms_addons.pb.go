// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: qms_addons.proto

package qms

import (
	header "github.com/cyverse-de/p/go/header"
	svcerror "github.com/cyverse-de/p/go/svcerror"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Represents the rate charged for an addon as the prcie for one year of service.
type AddonRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The rate.
	Rate float64 `protobuf:"fixed64,2,opt,name=rate,proto3" json:"rate,omitempty"`
	// The date that the rate becomes effective. There can be multiple rates for an addon; the rate that is effective at
	// any given time is always the rate with the most recent effective date that occurs in the past.
	EffectiveDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=effective_date,proto3" json:"effective_date,omitempty"`
}

func (x *AddonRate) Reset() {
	*x = AddonRate{}
	mi := &file_qms_addons_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddonRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonRate) ProtoMessage() {}

func (x *AddonRate) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonRate.ProtoReflect.Descriptor instead.
func (*AddonRate) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{0}
}

func (x *AddonRate) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AddonRate) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *AddonRate) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

// *
// A response type for addon rate requests.
type AddonRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can contain telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Contains error info from the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The addon rate object returned by the request handler.
	AddonRate *AddonRate `protobuf:"bytes,3,opt,name=addon_rate,proto3" json:"addon_rate,omitempty"`
}

func (x *AddonRateResponse) Reset() {
	*x = AddonRateResponse{}
	mi := &file_qms_addons_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddonRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonRateResponse) ProtoMessage() {}

func (x *AddonRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonRateResponse.ProtoReflect.Descriptor instead.
func (*AddonRateResponse) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{1}
}

func (x *AddonRateResponse) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddonRateResponse) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AddonRateResponse) GetAddonRate() *AddonRate {
	if x != nil {
		return x.AddonRate
	}
	return nil
}

// *
// A response type for addon rate requests that contains a list of addon rates.
type AddonRateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can contain telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Contains error info from the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The list of addon rate objects returned by the request handler.
	AddonRates []*AddonRate `protobuf:"bytes,3,rep,name=addon_rates,proto3" json:"addon_rates,omitempty"`
}

func (x *AddonRateList) Reset() {
	*x = AddonRateList{}
	mi := &file_qms_addons_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddonRateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonRateList) ProtoMessage() {}

func (x *AddonRateList) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonRateList.ProtoReflect.Descriptor instead.
func (*AddonRateList) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{2}
}

func (x *AddonRateList) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddonRateList) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AddonRateList) GetAddonRates() []*AddonRate {
	if x != nil {
		return x.AddonRates
	}
	return nil
}

// *
// Represents an add-on that can be applied to a subscription to provide a user
// with a change in a resource quota.
type Addon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The name of the add-on.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the add-on.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The resource type of the add-on.
	ResourceType *ResourceType `protobuf:"bytes,4,opt,name=resource_type,proto3" json:"resource_type,omitempty"`
	// How much of the resource type is added to the quota by the add-on.
	DefaultAmount float64 `protobuf:"fixed64,5,opt,name=default_amount,proto3" json:"default_amount,omitempty"`
	// Whether a user must pay for the add-on. Not whether the user has paid.
	DefaultPaid bool `protobuf:"varint,6,opt,name=default_paid,proto3" json:"default_paid,omitempty"`
	// The list of addon rates. An addon may have multiple rates; the one that is effective at any given time is always
	// the rate with the most recent effective date that occurs in the past.
	AddonRates []*AddonRate `protobuf:"bytes,7,rep,name=addon_rates,proto3" json:"addon_rates,omitempty"`
}

func (x *Addon) Reset() {
	*x = Addon{}
	mi := &file_qms_addons_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Addon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addon) ProtoMessage() {}

func (x *Addon) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addon.ProtoReflect.Descriptor instead.
func (*Addon) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{3}
}

func (x *Addon) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Addon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Addon) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Addon) GetResourceType() *ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *Addon) GetDefaultAmount() float64 {
	if x != nil {
		return x.DefaultAmount
	}
	return 0
}

func (x *Addon) GetDefaultPaid() bool {
	if x != nil {
		return x.DefaultPaid
	}
	return false
}

func (x *Addon) GetAddonRates() []*AddonRate {
	if x != nil {
		return x.AddonRates
	}
	return nil
}

// *
// A response to an add-on request. Contains a single add-on.
type AddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Error information generated by the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The add-on returned by the request handler.
	Addon *Addon `protobuf:"bytes,3,opt,name=addon,proto3" json:"addon,omitempty"`
}

func (x *AddonResponse) Reset() {
	*x = AddonResponse{}
	mi := &file_qms_addons_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonResponse) ProtoMessage() {}

func (x *AddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonResponse.ProtoReflect.Descriptor instead.
func (*AddonResponse) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{4}
}

func (x *AddonResponse) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddonResponse) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AddonResponse) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

// *
// A response to an add-on request that contains a list of add-ons.
type AddonListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry data.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Error information generated by the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The list of add-ons returned by the request handler.
	Addons []*Addon `protobuf:"bytes,3,rep,name=addons,proto3" json:"addons,omitempty"`
}

func (x *AddonListResponse) Reset() {
	*x = AddonListResponse{}
	mi := &file_qms_addons_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddonListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonListResponse) ProtoMessage() {}

func (x *AddonListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonListResponse.ProtoReflect.Descriptor instead.
func (*AddonListResponse) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{5}
}

func (x *AddonListResponse) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddonListResponse) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AddonListResponse) GetAddons() []*Addon {
	if x != nil {
		return x.Addons
	}
	return nil
}

// *
// A request to add an add-on to the system.
type AddAddonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry information.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The add-on to be added.
	Addon *Addon `protobuf:"bytes,2,opt,name=addon,proto3" json:"addon,omitempty"`
}

func (x *AddAddonRequest) Reset() {
	*x = AddAddonRequest{}
	mi := &file_qms_addons_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAddonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAddonRequest) ProtoMessage() {}

func (x *AddAddonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAddonRequest.ProtoReflect.Descriptor instead.
func (*AddAddonRequest) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{6}
}

func (x *AddAddonRequest) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddAddonRequest) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

// *
// A request to get information about an add-on.
type AddonLookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry information.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Either the add-on's id or name.
	//
	// Types that are assignable to Addon:
	//
	//	*AddonLookupRequest_Uuid
	//	*AddonLookupRequest_Name
	Addon isAddonLookupRequest_Addon `protobuf_oneof:"addon"`
}

func (x *AddonLookupRequest) Reset() {
	*x = AddonLookupRequest{}
	mi := &file_qms_addons_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddonLookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonLookupRequest) ProtoMessage() {}

func (x *AddonLookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonLookupRequest.ProtoReflect.Descriptor instead.
func (*AddonLookupRequest) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{7}
}

func (x *AddonLookupRequest) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (m *AddonLookupRequest) GetAddon() isAddonLookupRequest_Addon {
	if m != nil {
		return m.Addon
	}
	return nil
}

func (x *AddonLookupRequest) GetUuid() string {
	if x, ok := x.GetAddon().(*AddonLookupRequest_Uuid); ok {
		return x.Uuid
	}
	return ""
}

func (x *AddonLookupRequest) GetName() string {
	if x, ok := x.GetAddon().(*AddonLookupRequest_Name); ok {
		return x.Name
	}
	return ""
}

type isAddonLookupRequest_Addon interface {
	isAddonLookupRequest_Addon()
}

type AddonLookupRequest_Uuid struct {
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3,oneof"`
}

type AddonLookupRequest_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

func (*AddonLookupRequest_Uuid) isAddonLookupRequest_Addon() {}

func (*AddonLookupRequest_Name) isAddonLookupRequest_Addon() {}

// *
// A request to update an add-on. The boolean fields are needed because Go (and
// probably other languages) needs a way to tell when to set a field to an empty
// string, since that's the zero value for a string.
type UpdateAddonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry information.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The values to set in the update.
	Addon *Addon `protobuf:"bytes,2,opt,name=addon,proto3" json:"addon,omitempty"`
	// Whether to update the name of the addon.
	UpdateName bool `protobuf:"varint,3,opt,name=update_name,json=updateName,proto3" json:"update_name,omitempty"`
	// Whether to update the description of the addon.
	UpdateDescription bool `protobuf:"varint,4,opt,name=update_description,json=updateDescription,proto3" json:"update_description,omitempty"`
	// Whether to update the resource type of the addon.
	UpdateResourceType bool `protobuf:"varint,5,opt,name=update_resource_type,json=updateResourceType,proto3" json:"update_resource_type,omitempty"`
	// Whether to update the default amount of the addon.
	UpdateDefaultAmount bool `protobuf:"varint,6,opt,name=update_default_amount,json=updateDefaultAmount,proto3" json:"update_default_amount,omitempty"`
	// Whether to update the default paid field of the addon.
	UpdateDefaultPaid bool `protobuf:"varint,7,opt,name=update_default_paid,json=updateDefaultPaid,proto3" json:"update_default_paid,omitempty"`
	// Whether to update the addon rates.
	UpdateAddonRates bool `protobuf:"varint,8,opt,name=update_addon_rates,json=updateAddonRates,proto3" json:"update_addon_rates,omitempty"`
}

func (x *UpdateAddonRequest) Reset() {
	*x = UpdateAddonRequest{}
	mi := &file_qms_addons_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAddonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddonRequest) ProtoMessage() {}

func (x *UpdateAddonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddonRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddonRequest) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAddonRequest) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateAddonRequest) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

func (x *UpdateAddonRequest) GetUpdateName() bool {
	if x != nil {
		return x.UpdateName
	}
	return false
}

func (x *UpdateAddonRequest) GetUpdateDescription() bool {
	if x != nil {
		return x.UpdateDescription
	}
	return false
}

func (x *UpdateAddonRequest) GetUpdateResourceType() bool {
	if x != nil {
		return x.UpdateResourceType
	}
	return false
}

func (x *UpdateAddonRequest) GetUpdateDefaultAmount() bool {
	if x != nil {
		return x.UpdateDefaultAmount
	}
	return false
}

func (x *UpdateAddonRequest) GetUpdateDefaultPaid() bool {
	if x != nil {
		return x.UpdateDefaultPaid
	}
	return false
}

func (x *UpdateAddonRequest) GetUpdateAddonRates() bool {
	if x != nil {
		return x.UpdateAddonRates
	}
	return false
}

// *
// SubscriptionAddon is an add-on that has been applied to a subscription. It
// contains fields that can override the the default_amount and default_paid
// fields in the subscription.
type SubscriptionAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the add-on
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The add-on used with the subscription. May only contain the add-on's
	// UUID in some circumstances.
	Addon *Addon `protobuf:"bytes,2,opt,name=addon,proto3" json:"addon,omitempty"`
	// The subscription the add-on was applied to. May only contain the add-on's
	// UUID in some circumstances.
	Subscription *Subscription `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// The amount of the resource applied by the add-on. This should default to
	// the amount contained in the add-on definition, but can be overridden,
	// which is why it's a separate field here.
	Amount float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Whether the subscription add-on costs money. This should default to the
	// same paid value contained in the add-on definition, but can be overridden,
	// which is why it's a separate field here.
	Paid bool `protobuf:"varint,5,opt,name=paid,proto3" json:"paid,omitempty"`
	// The amount per year that we expect to have been charged if the user paid
	// for the add-on.
	AddonRate *AddonRate `protobuf:"bytes,6,opt,name=addon_rate,json=addonRate,proto3" json:"addon_rate,omitempty"`
}

func (x *SubscriptionAddon) Reset() {
	*x = SubscriptionAddon{}
	mi := &file_qms_addons_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionAddon) ProtoMessage() {}

func (x *SubscriptionAddon) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionAddon.ProtoReflect.Descriptor instead.
func (*SubscriptionAddon) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{9}
}

func (x *SubscriptionAddon) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SubscriptionAddon) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

func (x *SubscriptionAddon) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

func (x *SubscriptionAddon) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SubscriptionAddon) GetPaid() bool {
	if x != nil {
		return x.Paid
	}
	return false
}

func (x *SubscriptionAddon) GetAddonRate() *AddonRate {
	if x != nil {
		return x.AddonRate
	}
	return nil
}

// *
// Contains the information needed to update a subscription add-on.
type UpdateSubscriptionAddonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry information.
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The subscription add-on information being updated. Does not necessarily
	// have all fields set and the UUID field should not be set.
	SubscriptionAddon *SubscriptionAddon `protobuf:"bytes,2,opt,name=subscription_addon,proto3" json:"subscription_addon,omitempty"`
	// Whether to update the addon_id with the value contained in the subscription
	// addon. The DE backend currently does not support this. Do a delete->add
	// instead.
	UpdateAddonId bool `protobuf:"varint,3,opt,name=update_addon_id,proto3" json:"update_addon_id,omitempty"`
	// Whether to update the subscription_id field with the value contained
	// in the subscription addon. The DE backend currently does not support this.
	// Do a delete->add instead.
	UpdateSubscriptionId bool `protobuf:"varint,4,opt,name=update_subscription_id,proto3" json:"update_subscription_id,omitempty"`
	// Whether to update the amount field with the value contained in the
	// subscription addon.
	UpdateAmount bool `protobuf:"varint,5,opt,name=update_amount,proto3" json:"update_amount,omitempty"`
	// Whether to update the paid fields with the value contained in the
	// subscription addon.
	UpdatePaid bool `protobuf:"varint,6,opt,name=update_paid,proto3" json:"update_paid,omitempty"`
	// The amount per year that we expect to have been charged if the user paid
	// for the add-on.
	AddonRate *AddonRate `protobuf:"bytes,7,opt,name=addon_rate,json=addonRate,proto3" json:"addon_rate,omitempty"`
}

func (x *UpdateSubscriptionAddonRequest) Reset() {
	*x = UpdateSubscriptionAddonRequest{}
	mi := &file_qms_addons_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubscriptionAddonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriptionAddonRequest) ProtoMessage() {}

func (x *UpdateSubscriptionAddonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriptionAddonRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubscriptionAddonRequest) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateSubscriptionAddonRequest) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateSubscriptionAddonRequest) GetSubscriptionAddon() *SubscriptionAddon {
	if x != nil {
		return x.SubscriptionAddon
	}
	return nil
}

func (x *UpdateSubscriptionAddonRequest) GetUpdateAddonId() bool {
	if x != nil {
		return x.UpdateAddonId
	}
	return false
}

func (x *UpdateSubscriptionAddonRequest) GetUpdateSubscriptionId() bool {
	if x != nil {
		return x.UpdateSubscriptionId
	}
	return false
}

func (x *UpdateSubscriptionAddonRequest) GetUpdateAmount() bool {
	if x != nil {
		return x.UpdateAmount
	}
	return false
}

func (x *UpdateSubscriptionAddonRequest) GetUpdatePaid() bool {
	if x != nil {
		return x.UpdatePaid
	}
	return false
}

func (x *UpdateSubscriptionAddonRequest) GetAddonRate() *AddonRate {
	if x != nil {
		return x.AddonRate
	}
	return nil
}

// *
// Contains the subscription add-on returned by the request handler.
type SubscriptionAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry information
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Error information generated by the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The subscription add-on returned by the request handler.
	SubscriptionAddon *SubscriptionAddon `protobuf:"bytes,3,opt,name=subscription_addon,proto3" json:"subscription_addon,omitempty"`
}

func (x *SubscriptionAddonResponse) Reset() {
	*x = SubscriptionAddonResponse{}
	mi := &file_qms_addons_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionAddonResponse) ProtoMessage() {}

func (x *SubscriptionAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionAddonResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionAddonResponse) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{11}
}

func (x *SubscriptionAddonResponse) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SubscriptionAddonResponse) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SubscriptionAddonResponse) GetSubscriptionAddon() *SubscriptionAddon {
	if x != nil {
		return x.SubscriptionAddon
	}
	return nil
}

// *
// Contains a list of subscription add-ons returned by the request handler.
type SubscriptionAddonListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains telemetry information
	Header *header.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Error information generated by the request handler.
	Error *svcerror.ServiceError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The list of subscription add-ons returned by the request handler.
	SubscriptionAddons []*SubscriptionAddon `protobuf:"bytes,3,rep,name=subscription_addons,proto3" json:"subscription_addons,omitempty"`
}

func (x *SubscriptionAddonListResponse) Reset() {
	*x = SubscriptionAddonListResponse{}
	mi := &file_qms_addons_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionAddonListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionAddonListResponse) ProtoMessage() {}

func (x *SubscriptionAddonListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_qms_addons_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionAddonListResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionAddonListResponse) Descriptor() ([]byte, []int) {
	return file_qms_addons_proto_rawDescGZIP(), []int{12}
}

func (x *SubscriptionAddonListResponse) GetHeader() *header.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SubscriptionAddonListResponse) GetError() *svcerror.ServiceError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SubscriptionAddonListResponse) GetSubscriptionAddons() []*SubscriptionAddon {
	if x != nil {
		return x.SubscriptionAddons
	}
	return nil
}

var File_qms_addons_proto protoreflect.FileDescriptor

var file_qms_addons_proto_rawDesc = []byte{
	0x0a, 0x10, 0x71, 0x6d, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x71, 0x6d, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x73, 0x76, 0x63, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x71, 0x6d, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x71, 0x6d, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x76, 0x63, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x22, 0x97,
	0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x6d,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x05, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x76, 0x63, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x71, 0x6d, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x22, 0x8d, 0x01,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x71, 0x6d, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x22, 0x5b, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x22, 0xf2, 0x02,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x71, 0x6d,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x61, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05,
	0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x71, 0x6d,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x22, 0xe9, 0x02, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x12, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52,
	0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x12, 0x2d, 0x0a,
	0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x71, 0x6d, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0xb9, 0x01, 0x0a,
	0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x46, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x71,
	0x6d, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x1d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x48, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x71, 0x6d, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x42, 0x4f, 0x0a, 0x18, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x79, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2e, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x42, 0x11, 0x51, 0x4d, 0x53, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x50, 0x01, 0x5a, 0x1e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2d,
	0x64, 0x65, 0x2f, 0x70, 0x2f, 0x67, 0x6f, 0x2f, 0x71, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_qms_addons_proto_rawDescOnce sync.Once
	file_qms_addons_proto_rawDescData = file_qms_addons_proto_rawDesc
)

func file_qms_addons_proto_rawDescGZIP() []byte {
	file_qms_addons_proto_rawDescOnce.Do(func() {
		file_qms_addons_proto_rawDescData = protoimpl.X.CompressGZIP(file_qms_addons_proto_rawDescData)
	})
	return file_qms_addons_proto_rawDescData
}

var file_qms_addons_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_qms_addons_proto_goTypes = []any{
	(*AddonRate)(nil),                      // 0: qms.AddonRate
	(*AddonRateResponse)(nil),              // 1: qms.AddonRateResponse
	(*AddonRateList)(nil),                  // 2: qms.AddonRateList
	(*Addon)(nil),                          // 3: qms.Addon
	(*AddonResponse)(nil),                  // 4: qms.AddonResponse
	(*AddonListResponse)(nil),              // 5: qms.AddonListResponse
	(*AddAddonRequest)(nil),                // 6: qms.AddAddonRequest
	(*AddonLookupRequest)(nil),             // 7: qms.AddonLookupRequest
	(*UpdateAddonRequest)(nil),             // 8: qms.UpdateAddonRequest
	(*SubscriptionAddon)(nil),              // 9: qms.SubscriptionAddon
	(*UpdateSubscriptionAddonRequest)(nil), // 10: qms.UpdateSubscriptionAddonRequest
	(*SubscriptionAddonResponse)(nil),      // 11: qms.SubscriptionAddonResponse
	(*SubscriptionAddonListResponse)(nil),  // 12: qms.SubscriptionAddonListResponse
	(*timestamppb.Timestamp)(nil),          // 13: google.protobuf.Timestamp
	(*header.Header)(nil),                  // 14: header.Header
	(*svcerror.ServiceError)(nil),          // 15: svcerror.ServiceError
	(*ResourceType)(nil),                   // 16: qms.ResourceType
	(*Subscription)(nil),                   // 17: qms.Subscription
}
var file_qms_addons_proto_depIdxs = []int32{
	13, // 0: qms.AddonRate.effective_date:type_name -> google.protobuf.Timestamp
	14, // 1: qms.AddonRateResponse.header:type_name -> header.Header
	15, // 2: qms.AddonRateResponse.error:type_name -> svcerror.ServiceError
	0,  // 3: qms.AddonRateResponse.addon_rate:type_name -> qms.AddonRate
	14, // 4: qms.AddonRateList.header:type_name -> header.Header
	15, // 5: qms.AddonRateList.error:type_name -> svcerror.ServiceError
	0,  // 6: qms.AddonRateList.addon_rates:type_name -> qms.AddonRate
	16, // 7: qms.Addon.resource_type:type_name -> qms.ResourceType
	0,  // 8: qms.Addon.addon_rates:type_name -> qms.AddonRate
	14, // 9: qms.AddonResponse.header:type_name -> header.Header
	15, // 10: qms.AddonResponse.error:type_name -> svcerror.ServiceError
	3,  // 11: qms.AddonResponse.addon:type_name -> qms.Addon
	14, // 12: qms.AddonListResponse.header:type_name -> header.Header
	15, // 13: qms.AddonListResponse.error:type_name -> svcerror.ServiceError
	3,  // 14: qms.AddonListResponse.addons:type_name -> qms.Addon
	14, // 15: qms.AddAddonRequest.header:type_name -> header.Header
	3,  // 16: qms.AddAddonRequest.addon:type_name -> qms.Addon
	14, // 17: qms.AddonLookupRequest.header:type_name -> header.Header
	14, // 18: qms.UpdateAddonRequest.header:type_name -> header.Header
	3,  // 19: qms.UpdateAddonRequest.addon:type_name -> qms.Addon
	3,  // 20: qms.SubscriptionAddon.addon:type_name -> qms.Addon
	17, // 21: qms.SubscriptionAddon.subscription:type_name -> qms.Subscription
	0,  // 22: qms.SubscriptionAddon.addon_rate:type_name -> qms.AddonRate
	14, // 23: qms.UpdateSubscriptionAddonRequest.header:type_name -> header.Header
	9,  // 24: qms.UpdateSubscriptionAddonRequest.subscription_addon:type_name -> qms.SubscriptionAddon
	0,  // 25: qms.UpdateSubscriptionAddonRequest.addon_rate:type_name -> qms.AddonRate
	14, // 26: qms.SubscriptionAddonResponse.header:type_name -> header.Header
	15, // 27: qms.SubscriptionAddonResponse.error:type_name -> svcerror.ServiceError
	9,  // 28: qms.SubscriptionAddonResponse.subscription_addon:type_name -> qms.SubscriptionAddon
	14, // 29: qms.SubscriptionAddonListResponse.header:type_name -> header.Header
	15, // 30: qms.SubscriptionAddonListResponse.error:type_name -> svcerror.ServiceError
	9,  // 31: qms.SubscriptionAddonListResponse.subscription_addons:type_name -> qms.SubscriptionAddon
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_qms_addons_proto_init() }
func file_qms_addons_proto_init() {
	if File_qms_addons_proto != nil {
		return
	}
	file_qms_resource_types_proto_init()
	file_qms_subscriptions_proto_init()
	file_qms_addons_proto_msgTypes[7].OneofWrappers = []any{
		(*AddonLookupRequest_Uuid)(nil),
		(*AddonLookupRequest_Name)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_qms_addons_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qms_addons_proto_goTypes,
		DependencyIndexes: file_qms_addons_proto_depIdxs,
		MessageInfos:      file_qms_addons_proto_msgTypes,
	}.Build()
	File_qms_addons_proto = out.File
	file_qms_addons_proto_rawDesc = nil
	file_qms_addons_proto_goTypes = nil
	file_qms_addons_proto_depIdxs = nil
}
